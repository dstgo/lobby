basePath: /api/
definitions:
  lobbyapi.Mod:
    properties:
      enabled:
        type: boolean
      id:
        type: string
      name:
        type: string
      version1:
        type: string
      version2:
        type: string
    type: object
  lobbyapi.Player:
    properties:
      colour:
        description: hex color code
        type: string
      level:
        description: shard level
        type: integer
      name:
        type: string
      prefab:
        type: string
      steamId:
        type: string
    type: object
  lobbyapi.Secondaries:
    properties:
      __addr:
        type: string
      id:
        type: string
      port:
        type: integer
      steamid:
        type: string
    type: object
  types.AuthLoginOption:
    properties:
      password:
        description: user password
        type: string
      remember:
        description: remember user or not
        type: boolean
      username:
        description: username or email
        type: string
    required:
    - password
    - username
    type: object
  types.AuthRefreshTokenOption:
    properties:
      accessToken:
        description: access token
        type: string
      refreshToken:
        description: refresh token
        type: string
    required:
    - accessToken
    - refreshToken
    type: object
  types.AuthRegisterOption:
    properties:
      code:
        description: verification code from verify email
        type: string
      email:
        description: user email address
        type: string
      password:
        description: user password
        type: string
      username:
        description: username must be alphanumeric
        type: string
    required:
    - code
    - password
    - username
    type: object
  types.AuthResetPasswordOption:
    properties:
      code:
        description: verification code from verify email
        type: string
      email:
        description: user email address
        type: string
      password:
        description: new password
        type: string
    required:
    - code
    - password
    type: object
  types.AuthVerifyCodeOption:
    properties:
      to:
        description: email receiver
        type: string
      usage:
        allOf:
        - $ref: '#/definitions/types.Usage'
        description: 'verify code usage: 1-register 2-reset password'
    required:
    - usage
    type: object
  types.DstServerType:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6
    type: integer
    x-enum-varnames:
    - TypeAny
    - TypeDedicated
    - TypeClientHosted
    - TypeOfficial
    - TypeSteamClan
    - TypeSteamClanOnly
    - TypeFriendOnly
  types.DstSortType:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    type: integer
    x-enum-varnames:
    - DstSortByName
    - DstSortByCountry
    - DstSortByVersion
    - DstSortByOnline
    - DstSortByLevel
  types.LobbyServerDetails:
    properties:
      address:
        type: string
      allowNewPlayers:
        type: boolean
      city:
        type: string
      clanOnly:
        type: boolean
      clientHosted:
        type: boolean
      continent:
        type: string
      country:
        description: geo info
        type: string
      countryCode:
        type: string
      day:
        type: integer
      dayElapsedInSeason:
        type: integer
      daysLeftInSeason:
        type: integer
      dedicated:
        type: boolean
      friendOnly:
        type: boolean
      gameMode:
        type: string
      guid:
        description: network info
        type: string
      host:
        type: string
      intent:
        type: string
      lanOnly:
        type: boolean
      level:
        type: integer
      maxOnline:
        type: integer
      mod:
        description: switch options
        type: boolean
      mods:
        items:
          $ref: '#/definitions/lobbyapi.Mod'
        type: array
      name:
        description: game info
        type: string
      online:
        type: integer
      ownerID:
        type: string
      password:
        type: boolean
      platform:
        type: string
      players:
        items:
          $ref: '#/definitions/lobbyapi.Player'
        type: array
      port:
        type: integer
      pvp:
        type: boolean
      region:
        type: string
      rowID:
        type: string
      season:
        type: string
      secondaries:
        additionalProperties:
          $ref: '#/definitions/lobbyapi.Secondaries'
        type: object
      serverPaused:
        type: boolean
      session:
        type: string
      steamClanID:
        type: string
      steamID:
        type: string
      steamRoom:
        type: string
      tags:
        items:
          type: string
        type: array
      version:
        type: integer
    type: object
  types.LobbyServerInfo:
    properties:
      address:
        type: string
      allowNewPlayers:
        type: boolean
      city:
        type: string
      clanOnly:
        type: boolean
      clientHosted:
        type: boolean
      continent:
        type: string
      country:
        description: geo info
        type: string
      countryCode:
        type: string
      dedicated:
        type: boolean
      friendOnly:
        type: boolean
      gameMode:
        type: string
      guid:
        description: network info
        type: string
      host:
        type: string
      intent:
        type: string
      lanOnly:
        type: boolean
      level:
        type: integer
      maxOnline:
        type: integer
      mod:
        description: switch options
        type: boolean
      name:
        description: game info
        type: string
      online:
        type: integer
      ownerID:
        type: string
      password:
        type: boolean
      platform:
        type: string
      port:
        type: integer
      pvp:
        type: boolean
      region:
        type: string
      rowID:
        type: string
      season:
        type: string
      secondaries:
        additionalProperties:
          $ref: '#/definitions/lobbyapi.Secondaries'
        type: object
      serverPaused:
        type: boolean
      session:
        type: string
      steamClanID:
        type: string
      steamID:
        type: string
      steamRoom:
        type: string
      tags:
        items:
          type: string
        type: array
      version:
        type: integer
    type: object
  types.LobbyServerSearchResult:
    properties:
      list:
        items:
          $ref: '#/definitions/types.LobbyServerInfo'
        type: array
      total:
        type: integer
    type: object
  types.Response:
    properties:
      code:
        type: integer
      data: {}
      error:
        type: string
      msg:
        type: string
    type: object
  types.TokenResult:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
    type: object
  types.Usage:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - UsageUnknown
    - UsageRegister
    - UsageReset
  types.UserInfo:
    properties:
      created_at:
        type: integer
      email:
        type: string
      uid:
        type: string
      username:
        type: string
    type: object
  types.UserSearchResult:
    properties:
      list:
        items:
          $ref: '#/definitions/types.UserInfo'
        type: array
      total:
        type: integer
    type: object
info:
  contact:
    name: dstgo
    url: https://github.com/dstgo/lobby
  description: This is lobby swagger generated api documentation, know more information
    about lobby on GitHub.
  license:
    name: MIT LICENSE
    url: https://mit-license.org/
  title: Lobby HTTP API
  version: v0.0.0-Beta
paths:
  /auth/code:
    post:
      consumes:
      - application/json
      description: send verification code mail to specified email address
      parameters:
      - description: AuthVerifyCodeOption
        in: body
        name: AuthVerifyCodeOption
        required: true
        schema:
          $ref: '#/definitions/types.AuthVerifyCodeOption'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response'
      summary: VerifyCode
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: login with password, and returns jwt token pair
      parameters:
      - description: login params
        in: body
        name: loginOption
        required: true
        schema:
          $ref: '#/definitions/types.AuthLoginOption'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.Response'
            - properties:
                data:
                  $ref: '#/definitions/types.TokenResult'
              type: object
      summary: Login
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: ask for refresh access token lifetime with refresh token
      parameters:
      - description: refresh params
        in: body
        name: AuthRefreshTokenOption
        required: true
        schema:
          $ref: '#/definitions/types.AuthRefreshTokenOption'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.Response'
            - properties:
                data:
                  $ref: '#/definitions/types.TokenResult'
              type: object
      summary: Refresh
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: register a new user with verification code
      parameters:
      - description: register params
        in: body
        name: AuthRegisterOption
        required: true
        schema:
          $ref: '#/definitions/types.AuthRegisterOption'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response'
      summary: Register
      tags:
      - auth
  /auth/reset:
    post:
      consumes:
      - application/json
      description: reset user password with verification code
      parameters:
      - description: reset params
        in: body
        name: AuthResetPasswordOption
        required: true
        schema:
          $ref: '#/definitions/types.AuthResetPasswordOption'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response'
      summary: ResetPassword
      tags:
      - auth
  /lobby/info:
    get:
      consumes:
      - application/json
      description: returns details information about the server
      parameters:
      - in: query
        name: region
        required: true
        type: string
      - in: query
        name: rowId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.Response'
            - properties:
                data:
                  $ref: '#/definitions/types.LobbyServerDetails'
              type: object
      summary: Details
      tags:
      - dst/lobby
  /lobby/search:
    get:
      consumes:
      - application/json
      description: return a list of servers filtered by search parameters
      parameters:
      - description: ip address
        in: query
        name: address
        type: string
      - description: continent name
        in: query
        name: continent
        type: string
      - description: country name
        in: query
        name: country
        type: string
      - description: iso country code, eg. CN
        in: query
        name: countryCode
        type: string
      - description: descending order
        in: query
        name: desc
        type: boolean
      - description: mode for dst
        in: query
        name: gameMode
        type: string
      - description: intent for dst
        in: query
        name: intent
        type: string
      - description: world level of server
        in: query
        name: level
        type: integer
      - description: -1-off 0-all 1-on
        in: query
        name: mod
        type: integer
      - description: n page to search
        in: query
        name: page
        type: integer
      - description: -1-off 0-all 1-on
        in: query
        name: password
        type: integer
      - description: platform name, Steam | WeGame | PSN | XBone | PS4Official | Rail
          | Switch
        in: query
        name: platform
        type: string
      - description: -1-off 0-all 1-on
        in: query
        name: pvp
        type: integer
      - description: season spring | summer | autumn | winter or other mods season
        in: query
        name: season
        type: string
      - description: 0-any 1-dedicated 2-client hosted 3-official 4-steam group 5-steam
          group only 6-friend only
        enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
        in: query
        maximum: 6
        minimum: 0
        name: serverType
        type: integer
        x-enum-varnames:
        - TypeAny
        - TypeDedicated
        - TypeClientHosted
        - TypeOfficial
        - TypeSteamClan
        - TypeSteamClanOnly
        - TypeFriendOnly
      - description: size of page
        in: query
        name: size
        type: integer
      - description: 0-name 1-country 2-version 3-online 4-level
        enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        in: query
        maximum: 4
        minimum: 0
        name: sort
        type: integer
        x-enum-varnames:
        - DstSortByName
        - DstSortByCountry
        - DstSortByVersion
        - DstSortByOnline
        - DstSortByLevel
      - collectionFormat: csv
        description: tags of server
        in: query
        items:
          type: string
        name: tags
        type: array
      - description: search content
        in: query
        name: text
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.Response'
            - properties:
                data:
                  $ref: '#/definitions/types.LobbyServerSearchResult'
              type: object
      summary: Search
      tags:
      - dst/lobby
  /lobby/version:
    get:
      consumes:
      - application/json
      description: return latest version of server
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Version
      tags:
      - dst/lobby
  /ping:
    get:
      consumes:
      - application/json
      description: test server if is available
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Ping
      tags:
      - system
  /pong:
    get:
      consumes:
      - application/json
      description: test if server authentication is working
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Pong
      tags:
      - system
  /user/info:
    get:
      consumes:
      - application/json
      description: get user information by given uid
      parameters:
      - description: uid
        in: query
        name: uid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.Response'
            - properties:
                data:
                  $ref: '#/definitions/types.UserInfo'
              type: object
      summary: Info
      tags:
      - user
  /user/list:
    get:
      consumes:
      - application/json
      description: list user info by page
      parameters:
      - in: query
        name: page
        required: true
        type: integer
      - in: query
        name: search
        type: string
      - in: query
        name: size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.Response'
            - properties:
                data:
                  $ref: '#/definitions/types.UserSearchResult'
              type: object
      summary: List
      tags:
      - user
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
