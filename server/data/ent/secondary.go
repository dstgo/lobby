// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/dstgo/lobby/server/data/ent/secondary"
	"github.com/dstgo/lobby/server/data/ent/server"
)

// Secondary is the model entity for the Secondary schema.
type Secondary struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Sid holds the value of the "sid" field.
	Sid string `json:"sid,omitempty"`
	// SteamID holds the value of the "steam_id" field.
	SteamID string `json:"steam_id,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// Port holds the value of the "port" field.
	Port int `json:"port,omitempty"`
	// OwnerID holds the value of the "owner_id" field.
	OwnerID int `json:"owner_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SecondaryQuery when eager-loading is set.
	Edges        SecondaryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SecondaryEdges holds the relations/edges for other nodes in the graph.
type SecondaryEdges struct {
	// Servers holds the value of the servers edge.
	Servers *Server `json:"servers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ServersOrErr returns the Servers value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SecondaryEdges) ServersOrErr() (*Server, error) {
	if e.Servers != nil {
		return e.Servers, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: server.Label}
	}
	return nil, &NotLoadedError{edge: "servers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Secondary) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case secondary.FieldID, secondary.FieldPort, secondary.FieldOwnerID:
			values[i] = new(sql.NullInt64)
		case secondary.FieldSid, secondary.FieldSteamID, secondary.FieldAddress:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Secondary fields.
func (s *Secondary) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case secondary.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case secondary.FieldSid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sid", values[i])
			} else if value.Valid {
				s.Sid = value.String
			}
		case secondary.FieldSteamID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field steam_id", values[i])
			} else if value.Valid {
				s.SteamID = value.String
			}
		case secondary.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				s.Address = value.String
			}
		case secondary.FieldPort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field port", values[i])
			} else if value.Valid {
				s.Port = int(value.Int64)
			}
		case secondary.FieldOwnerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				s.OwnerID = int(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Secondary.
// This includes values selected through modifiers, order, etc.
func (s *Secondary) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryServers queries the "servers" edge of the Secondary entity.
func (s *Secondary) QueryServers() *ServerQuery {
	return NewSecondaryClient(s.config).QueryServers(s)
}

// Update returns a builder for updating this Secondary.
// Note that you need to call Secondary.Unwrap() before calling this method if this Secondary
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Secondary) Update() *SecondaryUpdateOne {
	return NewSecondaryClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Secondary entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Secondary) Unwrap() *Secondary {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Secondary is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Secondary) String() string {
	var builder strings.Builder
	builder.WriteString("Secondary(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("sid=")
	builder.WriteString(s.Sid)
	builder.WriteString(", ")
	builder.WriteString("steam_id=")
	builder.WriteString(s.SteamID)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(s.Address)
	builder.WriteString(", ")
	builder.WriteString("port=")
	builder.WriteString(fmt.Sprintf("%v", s.Port))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(fmt.Sprintf("%v", s.OwnerID))
	builder.WriteByte(')')
	return builder.String()
}

// Secondaries is a parsable slice of Secondary.
type Secondaries []*Secondary
