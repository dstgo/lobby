// Code generated by ent, DO NOT EDIT.

package server

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the server type in the database.
	Label = "server"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldGUID holds the string denoting the guid field in the database.
	FieldGUID = "guid"
	// FieldRowID holds the string denoting the row_id field in the database.
	FieldRowID = "row_id"
	// FieldSteamID holds the string denoting the steam_id field in the database.
	FieldSteamID = "steam_id"
	// FieldSteamClanID holds the string denoting the steam_clan_id field in the database.
	FieldSteamClanID = "steam_clan_id"
	// FieldOwnerID holds the string denoting the owner_id field in the database.
	FieldOwnerID = "owner_id"
	// FieldSteamRoom holds the string denoting the steam_room field in the database.
	FieldSteamRoom = "steam_room"
	// FieldSession holds the string denoting the session field in the database.
	FieldSession = "session"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldPort holds the string denoting the port field in the database.
	FieldPort = "port"
	// FieldHost holds the string denoting the host field in the database.
	FieldHost = "host"
	// FieldPlatform holds the string denoting the platform field in the database.
	FieldPlatform = "platform"
	// FieldClanOnly holds the string denoting the clan_only field in the database.
	FieldClanOnly = "clan_only"
	// FieldLanOnly holds the string denoting the lan_only field in the database.
	FieldLanOnly = "lan_only"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldGameMode holds the string denoting the game_mode field in the database.
	FieldGameMode = "game_mode"
	// FieldIntent holds the string denoting the intent field in the database.
	FieldIntent = "intent"
	// FieldSeason holds the string denoting the season field in the database.
	FieldSeason = "season"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldMaxOnline holds the string denoting the max_online field in the database.
	FieldMaxOnline = "max_online"
	// FieldOnline holds the string denoting the online field in the database.
	FieldOnline = "online"
	// FieldLevel holds the string denoting the level field in the database.
	FieldLevel = "level"
	// FieldMod holds the string denoting the mod field in the database.
	FieldMod = "mod"
	// FieldPvp holds the string denoting the pvp field in the database.
	FieldPvp = "pvp"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldDedicated holds the string denoting the dedicated field in the database.
	FieldDedicated = "dedicated"
	// FieldClientHosted holds the string denoting the client_hosted field in the database.
	FieldClientHosted = "client_hosted"
	// FieldAllowNewPlayers holds the string denoting the allow_new_players field in the database.
	FieldAllowNewPlayers = "allow_new_players"
	// FieldServerPaused holds the string denoting the server_paused field in the database.
	FieldServerPaused = "server_paused"
	// FieldFriendOnly holds the string denoting the friend_only field in the database.
	FieldFriendOnly = "friend_only"
	// FieldQueryVersion holds the string denoting the query_version field in the database.
	FieldQueryVersion = "query_version"
	// FieldCountry holds the string denoting the country field in the database.
	FieldCountry = "country"
	// FieldContinent holds the string denoting the continent field in the database.
	FieldContinent = "continent"
	// FieldCountryCode holds the string denoting the country_code field in the database.
	FieldCountryCode = "country_code"
	// FieldCity holds the string denoting the city field in the database.
	FieldCity = "city"
	// FieldRegion holds the string denoting the region field in the database.
	FieldRegion = "region"
	// EdgeTags holds the string denoting the tags edge name in mutations.
	EdgeTags = "tags"
	// EdgeSecondaries holds the string denoting the secondaries edge name in mutations.
	EdgeSecondaries = "secondaries"
	// Table holds the table name of the server in the database.
	Table = "servers"
	// TagsTable is the table that holds the tags relation/edge.
	TagsTable = "tags"
	// TagsInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	TagsInverseTable = "tags"
	// TagsColumn is the table column denoting the tags relation/edge.
	TagsColumn = "owner_id"
	// SecondariesTable is the table that holds the secondaries relation/edge.
	SecondariesTable = "secondaries"
	// SecondariesInverseTable is the table name for the Secondary entity.
	// It exists in this package in order to avoid circular dependency with the "secondary" package.
	SecondariesInverseTable = "secondaries"
	// SecondariesColumn is the table column denoting the secondaries relation/edge.
	SecondariesColumn = "owner_id"
)

// Columns holds all SQL columns for server fields.
var Columns = []string{
	FieldID,
	FieldGUID,
	FieldRowID,
	FieldSteamID,
	FieldSteamClanID,
	FieldOwnerID,
	FieldSteamRoom,
	FieldSession,
	FieldAddress,
	FieldPort,
	FieldHost,
	FieldPlatform,
	FieldClanOnly,
	FieldLanOnly,
	FieldName,
	FieldGameMode,
	FieldIntent,
	FieldSeason,
	FieldVersion,
	FieldMaxOnline,
	FieldOnline,
	FieldLevel,
	FieldMod,
	FieldPvp,
	FieldPassword,
	FieldDedicated,
	FieldClientHosted,
	FieldAllowNewPlayers,
	FieldServerPaused,
	FieldFriendOnly,
	FieldQueryVersion,
	FieldCountry,
	FieldContinent,
	FieldCountryCode,
	FieldCity,
	FieldRegion,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Server queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByGUID orders the results by the guid field.
func ByGUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGUID, opts...).ToFunc()
}

// ByRowID orders the results by the row_id field.
func ByRowID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRowID, opts...).ToFunc()
}

// BySteamID orders the results by the steam_id field.
func BySteamID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSteamID, opts...).ToFunc()
}

// BySteamClanID orders the results by the steam_clan_id field.
func BySteamClanID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSteamClanID, opts...).ToFunc()
}

// ByOwnerID orders the results by the owner_id field.
func ByOwnerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerID, opts...).ToFunc()
}

// BySteamRoom orders the results by the steam_room field.
func BySteamRoom(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSteamRoom, opts...).ToFunc()
}

// BySession orders the results by the session field.
func BySession(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSession, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByPort orders the results by the port field.
func ByPort(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPort, opts...).ToFunc()
}

// ByHost orders the results by the host field.
func ByHost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHost, opts...).ToFunc()
}

// ByPlatform orders the results by the platform field.
func ByPlatform(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlatform, opts...).ToFunc()
}

// ByClanOnly orders the results by the clan_only field.
func ByClanOnly(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClanOnly, opts...).ToFunc()
}

// ByLanOnly orders the results by the lan_only field.
func ByLanOnly(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLanOnly, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByGameMode orders the results by the game_mode field.
func ByGameMode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGameMode, opts...).ToFunc()
}

// ByIntent orders the results by the intent field.
func ByIntent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIntent, opts...).ToFunc()
}

// BySeason orders the results by the season field.
func BySeason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSeason, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByMaxOnline orders the results by the max_online field.
func ByMaxOnline(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxOnline, opts...).ToFunc()
}

// ByOnline orders the results by the online field.
func ByOnline(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOnline, opts...).ToFunc()
}

// ByLevel orders the results by the level field.
func ByLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLevel, opts...).ToFunc()
}

// ByMod orders the results by the mod field.
func ByMod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMod, opts...).ToFunc()
}

// ByPvp orders the results by the pvp field.
func ByPvp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPvp, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByDedicated orders the results by the dedicated field.
func ByDedicated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDedicated, opts...).ToFunc()
}

// ByClientHosted orders the results by the client_hosted field.
func ByClientHosted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientHosted, opts...).ToFunc()
}

// ByAllowNewPlayers orders the results by the allow_new_players field.
func ByAllowNewPlayers(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAllowNewPlayers, opts...).ToFunc()
}

// ByServerPaused orders the results by the server_paused field.
func ByServerPaused(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldServerPaused, opts...).ToFunc()
}

// ByFriendOnly orders the results by the friend_only field.
func ByFriendOnly(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFriendOnly, opts...).ToFunc()
}

// ByQueryVersion orders the results by the query_version field.
func ByQueryVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQueryVersion, opts...).ToFunc()
}

// ByCountry orders the results by the country field.
func ByCountry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCountry, opts...).ToFunc()
}

// ByContinent orders the results by the continent field.
func ByContinent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContinent, opts...).ToFunc()
}

// ByCountryCode orders the results by the country_code field.
func ByCountryCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCountryCode, opts...).ToFunc()
}

// ByCity orders the results by the city field.
func ByCity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCity, opts...).ToFunc()
}

// ByRegion orders the results by the region field.
func ByRegion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegion, opts...).ToFunc()
}

// ByTagsCount orders the results by tags count.
func ByTagsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTagsStep(), opts...)
	}
}

// ByTags orders the results by tags terms.
func ByTags(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTagsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySecondariesCount orders the results by secondaries count.
func BySecondariesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSecondariesStep(), opts...)
	}
}

// BySecondaries orders the results by secondaries terms.
func BySecondaries(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSecondariesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTagsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TagsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TagsTable, TagsColumn),
	)
}
func newSecondariesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SecondariesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SecondariesTable, SecondariesColumn),
	)
}
