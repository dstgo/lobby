// Code generated by ent, DO NOT EDIT.

package server

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/dstgo/lobby/server/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldID, id))
}

// GUID applies equality check predicate on the "guid" field. It's identical to GUIDEQ.
func GUID(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldGUID, v))
}

// RowID applies equality check predicate on the "row_id" field. It's identical to RowIDEQ.
func RowID(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldRowID, v))
}

// SteamID applies equality check predicate on the "steam_id" field. It's identical to SteamIDEQ.
func SteamID(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldSteamID, v))
}

// SteamClanID applies equality check predicate on the "steam_clan_id" field. It's identical to SteamClanIDEQ.
func SteamClanID(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldSteamClanID, v))
}

// OwnerID applies equality check predicate on the "owner_id" field. It's identical to OwnerIDEQ.
func OwnerID(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldOwnerID, v))
}

// SteamRoom applies equality check predicate on the "steam_room" field. It's identical to SteamRoomEQ.
func SteamRoom(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldSteamRoom, v))
}

// Session applies equality check predicate on the "session" field. It's identical to SessionEQ.
func Session(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldSession, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldAddress, v))
}

// Port applies equality check predicate on the "port" field. It's identical to PortEQ.
func Port(v int) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldPort, v))
}

// Host applies equality check predicate on the "host" field. It's identical to HostEQ.
func Host(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldHost, v))
}

// Platform applies equality check predicate on the "platform" field. It's identical to PlatformEQ.
func Platform(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldPlatform, v))
}

// ClanOnly applies equality check predicate on the "clan_only" field. It's identical to ClanOnlyEQ.
func ClanOnly(v bool) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldClanOnly, v))
}

// LanOnly applies equality check predicate on the "lan_only" field. It's identical to LanOnlyEQ.
func LanOnly(v bool) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldLanOnly, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldName, v))
}

// GameMode applies equality check predicate on the "game_mode" field. It's identical to GameModeEQ.
func GameMode(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldGameMode, v))
}

// Intent applies equality check predicate on the "intent" field. It's identical to IntentEQ.
func Intent(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldIntent, v))
}

// Season applies equality check predicate on the "season" field. It's identical to SeasonEQ.
func Season(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldSeason, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldVersion, v))
}

// MaxOnline applies equality check predicate on the "max_online" field. It's identical to MaxOnlineEQ.
func MaxOnline(v int) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldMaxOnline, v))
}

// Online applies equality check predicate on the "online" field. It's identical to OnlineEQ.
func Online(v int) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldOnline, v))
}

// Level applies equality check predicate on the "level" field. It's identical to LevelEQ.
func Level(v int) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldLevel, v))
}

// Mod applies equality check predicate on the "mod" field. It's identical to ModEQ.
func Mod(v bool) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldMod, v))
}

// Pvp applies equality check predicate on the "pvp" field. It's identical to PvpEQ.
func Pvp(v bool) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldPvp, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v bool) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldPassword, v))
}

// Dedicated applies equality check predicate on the "dedicated" field. It's identical to DedicatedEQ.
func Dedicated(v bool) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldDedicated, v))
}

// ClientHosted applies equality check predicate on the "client_hosted" field. It's identical to ClientHostedEQ.
func ClientHosted(v bool) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldClientHosted, v))
}

// AllowNewPlayers applies equality check predicate on the "allow_new_players" field. It's identical to AllowNewPlayersEQ.
func AllowNewPlayers(v bool) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldAllowNewPlayers, v))
}

// ServerPaused applies equality check predicate on the "server_paused" field. It's identical to ServerPausedEQ.
func ServerPaused(v bool) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldServerPaused, v))
}

// FriendOnly applies equality check predicate on the "friend_only" field. It's identical to FriendOnlyEQ.
func FriendOnly(v bool) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldFriendOnly, v))
}

// QueryVersion applies equality check predicate on the "query_version" field. It's identical to QueryVersionEQ.
func QueryVersion(v int64) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldQueryVersion, v))
}

// Country applies equality check predicate on the "country" field. It's identical to CountryEQ.
func Country(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldCountry, v))
}

// Continent applies equality check predicate on the "continent" field. It's identical to ContinentEQ.
func Continent(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldContinent, v))
}

// CountryCode applies equality check predicate on the "country_code" field. It's identical to CountryCodeEQ.
func CountryCode(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldCountryCode, v))
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldCity, v))
}

// Region applies equality check predicate on the "region" field. It's identical to RegionEQ.
func Region(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldRegion, v))
}

// GUIDEQ applies the EQ predicate on the "guid" field.
func GUIDEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldGUID, v))
}

// GUIDNEQ applies the NEQ predicate on the "guid" field.
func GUIDNEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldGUID, v))
}

// GUIDIn applies the In predicate on the "guid" field.
func GUIDIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldGUID, vs...))
}

// GUIDNotIn applies the NotIn predicate on the "guid" field.
func GUIDNotIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldGUID, vs...))
}

// GUIDGT applies the GT predicate on the "guid" field.
func GUIDGT(v string) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldGUID, v))
}

// GUIDGTE applies the GTE predicate on the "guid" field.
func GUIDGTE(v string) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldGUID, v))
}

// GUIDLT applies the LT predicate on the "guid" field.
func GUIDLT(v string) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldGUID, v))
}

// GUIDLTE applies the LTE predicate on the "guid" field.
func GUIDLTE(v string) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldGUID, v))
}

// GUIDContains applies the Contains predicate on the "guid" field.
func GUIDContains(v string) predicate.Server {
	return predicate.Server(sql.FieldContains(FieldGUID, v))
}

// GUIDHasPrefix applies the HasPrefix predicate on the "guid" field.
func GUIDHasPrefix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasPrefix(FieldGUID, v))
}

// GUIDHasSuffix applies the HasSuffix predicate on the "guid" field.
func GUIDHasSuffix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasSuffix(FieldGUID, v))
}

// GUIDEqualFold applies the EqualFold predicate on the "guid" field.
func GUIDEqualFold(v string) predicate.Server {
	return predicate.Server(sql.FieldEqualFold(FieldGUID, v))
}

// GUIDContainsFold applies the ContainsFold predicate on the "guid" field.
func GUIDContainsFold(v string) predicate.Server {
	return predicate.Server(sql.FieldContainsFold(FieldGUID, v))
}

// RowIDEQ applies the EQ predicate on the "row_id" field.
func RowIDEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldRowID, v))
}

// RowIDNEQ applies the NEQ predicate on the "row_id" field.
func RowIDNEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldRowID, v))
}

// RowIDIn applies the In predicate on the "row_id" field.
func RowIDIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldRowID, vs...))
}

// RowIDNotIn applies the NotIn predicate on the "row_id" field.
func RowIDNotIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldRowID, vs...))
}

// RowIDGT applies the GT predicate on the "row_id" field.
func RowIDGT(v string) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldRowID, v))
}

// RowIDGTE applies the GTE predicate on the "row_id" field.
func RowIDGTE(v string) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldRowID, v))
}

// RowIDLT applies the LT predicate on the "row_id" field.
func RowIDLT(v string) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldRowID, v))
}

// RowIDLTE applies the LTE predicate on the "row_id" field.
func RowIDLTE(v string) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldRowID, v))
}

// RowIDContains applies the Contains predicate on the "row_id" field.
func RowIDContains(v string) predicate.Server {
	return predicate.Server(sql.FieldContains(FieldRowID, v))
}

// RowIDHasPrefix applies the HasPrefix predicate on the "row_id" field.
func RowIDHasPrefix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasPrefix(FieldRowID, v))
}

// RowIDHasSuffix applies the HasSuffix predicate on the "row_id" field.
func RowIDHasSuffix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasSuffix(FieldRowID, v))
}

// RowIDEqualFold applies the EqualFold predicate on the "row_id" field.
func RowIDEqualFold(v string) predicate.Server {
	return predicate.Server(sql.FieldEqualFold(FieldRowID, v))
}

// RowIDContainsFold applies the ContainsFold predicate on the "row_id" field.
func RowIDContainsFold(v string) predicate.Server {
	return predicate.Server(sql.FieldContainsFold(FieldRowID, v))
}

// SteamIDEQ applies the EQ predicate on the "steam_id" field.
func SteamIDEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldSteamID, v))
}

// SteamIDNEQ applies the NEQ predicate on the "steam_id" field.
func SteamIDNEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldSteamID, v))
}

// SteamIDIn applies the In predicate on the "steam_id" field.
func SteamIDIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldSteamID, vs...))
}

// SteamIDNotIn applies the NotIn predicate on the "steam_id" field.
func SteamIDNotIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldSteamID, vs...))
}

// SteamIDGT applies the GT predicate on the "steam_id" field.
func SteamIDGT(v string) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldSteamID, v))
}

// SteamIDGTE applies the GTE predicate on the "steam_id" field.
func SteamIDGTE(v string) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldSteamID, v))
}

// SteamIDLT applies the LT predicate on the "steam_id" field.
func SteamIDLT(v string) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldSteamID, v))
}

// SteamIDLTE applies the LTE predicate on the "steam_id" field.
func SteamIDLTE(v string) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldSteamID, v))
}

// SteamIDContains applies the Contains predicate on the "steam_id" field.
func SteamIDContains(v string) predicate.Server {
	return predicate.Server(sql.FieldContains(FieldSteamID, v))
}

// SteamIDHasPrefix applies the HasPrefix predicate on the "steam_id" field.
func SteamIDHasPrefix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasPrefix(FieldSteamID, v))
}

// SteamIDHasSuffix applies the HasSuffix predicate on the "steam_id" field.
func SteamIDHasSuffix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasSuffix(FieldSteamID, v))
}

// SteamIDEqualFold applies the EqualFold predicate on the "steam_id" field.
func SteamIDEqualFold(v string) predicate.Server {
	return predicate.Server(sql.FieldEqualFold(FieldSteamID, v))
}

// SteamIDContainsFold applies the ContainsFold predicate on the "steam_id" field.
func SteamIDContainsFold(v string) predicate.Server {
	return predicate.Server(sql.FieldContainsFold(FieldSteamID, v))
}

// SteamClanIDEQ applies the EQ predicate on the "steam_clan_id" field.
func SteamClanIDEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldSteamClanID, v))
}

// SteamClanIDNEQ applies the NEQ predicate on the "steam_clan_id" field.
func SteamClanIDNEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldSteamClanID, v))
}

// SteamClanIDIn applies the In predicate on the "steam_clan_id" field.
func SteamClanIDIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldSteamClanID, vs...))
}

// SteamClanIDNotIn applies the NotIn predicate on the "steam_clan_id" field.
func SteamClanIDNotIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldSteamClanID, vs...))
}

// SteamClanIDGT applies the GT predicate on the "steam_clan_id" field.
func SteamClanIDGT(v string) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldSteamClanID, v))
}

// SteamClanIDGTE applies the GTE predicate on the "steam_clan_id" field.
func SteamClanIDGTE(v string) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldSteamClanID, v))
}

// SteamClanIDLT applies the LT predicate on the "steam_clan_id" field.
func SteamClanIDLT(v string) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldSteamClanID, v))
}

// SteamClanIDLTE applies the LTE predicate on the "steam_clan_id" field.
func SteamClanIDLTE(v string) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldSteamClanID, v))
}

// SteamClanIDContains applies the Contains predicate on the "steam_clan_id" field.
func SteamClanIDContains(v string) predicate.Server {
	return predicate.Server(sql.FieldContains(FieldSteamClanID, v))
}

// SteamClanIDHasPrefix applies the HasPrefix predicate on the "steam_clan_id" field.
func SteamClanIDHasPrefix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasPrefix(FieldSteamClanID, v))
}

// SteamClanIDHasSuffix applies the HasSuffix predicate on the "steam_clan_id" field.
func SteamClanIDHasSuffix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasSuffix(FieldSteamClanID, v))
}

// SteamClanIDEqualFold applies the EqualFold predicate on the "steam_clan_id" field.
func SteamClanIDEqualFold(v string) predicate.Server {
	return predicate.Server(sql.FieldEqualFold(FieldSteamClanID, v))
}

// SteamClanIDContainsFold applies the ContainsFold predicate on the "steam_clan_id" field.
func SteamClanIDContainsFold(v string) predicate.Server {
	return predicate.Server(sql.FieldContainsFold(FieldSteamClanID, v))
}

// OwnerIDEQ applies the EQ predicate on the "owner_id" field.
func OwnerIDEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldOwnerID, v))
}

// OwnerIDNEQ applies the NEQ predicate on the "owner_id" field.
func OwnerIDNEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldOwnerID, v))
}

// OwnerIDIn applies the In predicate on the "owner_id" field.
func OwnerIDIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldOwnerID, vs...))
}

// OwnerIDNotIn applies the NotIn predicate on the "owner_id" field.
func OwnerIDNotIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldOwnerID, vs...))
}

// OwnerIDGT applies the GT predicate on the "owner_id" field.
func OwnerIDGT(v string) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldOwnerID, v))
}

// OwnerIDGTE applies the GTE predicate on the "owner_id" field.
func OwnerIDGTE(v string) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldOwnerID, v))
}

// OwnerIDLT applies the LT predicate on the "owner_id" field.
func OwnerIDLT(v string) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldOwnerID, v))
}

// OwnerIDLTE applies the LTE predicate on the "owner_id" field.
func OwnerIDLTE(v string) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldOwnerID, v))
}

// OwnerIDContains applies the Contains predicate on the "owner_id" field.
func OwnerIDContains(v string) predicate.Server {
	return predicate.Server(sql.FieldContains(FieldOwnerID, v))
}

// OwnerIDHasPrefix applies the HasPrefix predicate on the "owner_id" field.
func OwnerIDHasPrefix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasPrefix(FieldOwnerID, v))
}

// OwnerIDHasSuffix applies the HasSuffix predicate on the "owner_id" field.
func OwnerIDHasSuffix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasSuffix(FieldOwnerID, v))
}

// OwnerIDEqualFold applies the EqualFold predicate on the "owner_id" field.
func OwnerIDEqualFold(v string) predicate.Server {
	return predicate.Server(sql.FieldEqualFold(FieldOwnerID, v))
}

// OwnerIDContainsFold applies the ContainsFold predicate on the "owner_id" field.
func OwnerIDContainsFold(v string) predicate.Server {
	return predicate.Server(sql.FieldContainsFold(FieldOwnerID, v))
}

// SteamRoomEQ applies the EQ predicate on the "steam_room" field.
func SteamRoomEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldSteamRoom, v))
}

// SteamRoomNEQ applies the NEQ predicate on the "steam_room" field.
func SteamRoomNEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldSteamRoom, v))
}

// SteamRoomIn applies the In predicate on the "steam_room" field.
func SteamRoomIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldSteamRoom, vs...))
}

// SteamRoomNotIn applies the NotIn predicate on the "steam_room" field.
func SteamRoomNotIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldSteamRoom, vs...))
}

// SteamRoomGT applies the GT predicate on the "steam_room" field.
func SteamRoomGT(v string) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldSteamRoom, v))
}

// SteamRoomGTE applies the GTE predicate on the "steam_room" field.
func SteamRoomGTE(v string) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldSteamRoom, v))
}

// SteamRoomLT applies the LT predicate on the "steam_room" field.
func SteamRoomLT(v string) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldSteamRoom, v))
}

// SteamRoomLTE applies the LTE predicate on the "steam_room" field.
func SteamRoomLTE(v string) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldSteamRoom, v))
}

// SteamRoomContains applies the Contains predicate on the "steam_room" field.
func SteamRoomContains(v string) predicate.Server {
	return predicate.Server(sql.FieldContains(FieldSteamRoom, v))
}

// SteamRoomHasPrefix applies the HasPrefix predicate on the "steam_room" field.
func SteamRoomHasPrefix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasPrefix(FieldSteamRoom, v))
}

// SteamRoomHasSuffix applies the HasSuffix predicate on the "steam_room" field.
func SteamRoomHasSuffix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasSuffix(FieldSteamRoom, v))
}

// SteamRoomEqualFold applies the EqualFold predicate on the "steam_room" field.
func SteamRoomEqualFold(v string) predicate.Server {
	return predicate.Server(sql.FieldEqualFold(FieldSteamRoom, v))
}

// SteamRoomContainsFold applies the ContainsFold predicate on the "steam_room" field.
func SteamRoomContainsFold(v string) predicate.Server {
	return predicate.Server(sql.FieldContainsFold(FieldSteamRoom, v))
}

// SessionEQ applies the EQ predicate on the "session" field.
func SessionEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldSession, v))
}

// SessionNEQ applies the NEQ predicate on the "session" field.
func SessionNEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldSession, v))
}

// SessionIn applies the In predicate on the "session" field.
func SessionIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldSession, vs...))
}

// SessionNotIn applies the NotIn predicate on the "session" field.
func SessionNotIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldSession, vs...))
}

// SessionGT applies the GT predicate on the "session" field.
func SessionGT(v string) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldSession, v))
}

// SessionGTE applies the GTE predicate on the "session" field.
func SessionGTE(v string) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldSession, v))
}

// SessionLT applies the LT predicate on the "session" field.
func SessionLT(v string) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldSession, v))
}

// SessionLTE applies the LTE predicate on the "session" field.
func SessionLTE(v string) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldSession, v))
}

// SessionContains applies the Contains predicate on the "session" field.
func SessionContains(v string) predicate.Server {
	return predicate.Server(sql.FieldContains(FieldSession, v))
}

// SessionHasPrefix applies the HasPrefix predicate on the "session" field.
func SessionHasPrefix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasPrefix(FieldSession, v))
}

// SessionHasSuffix applies the HasSuffix predicate on the "session" field.
func SessionHasSuffix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasSuffix(FieldSession, v))
}

// SessionEqualFold applies the EqualFold predicate on the "session" field.
func SessionEqualFold(v string) predicate.Server {
	return predicate.Server(sql.FieldEqualFold(FieldSession, v))
}

// SessionContainsFold applies the ContainsFold predicate on the "session" field.
func SessionContainsFold(v string) predicate.Server {
	return predicate.Server(sql.FieldContainsFold(FieldSession, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Server {
	return predicate.Server(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Server {
	return predicate.Server(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Server {
	return predicate.Server(sql.FieldContainsFold(FieldAddress, v))
}

// PortEQ applies the EQ predicate on the "port" field.
func PortEQ(v int) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldPort, v))
}

// PortNEQ applies the NEQ predicate on the "port" field.
func PortNEQ(v int) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldPort, v))
}

// PortIn applies the In predicate on the "port" field.
func PortIn(vs ...int) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldPort, vs...))
}

// PortNotIn applies the NotIn predicate on the "port" field.
func PortNotIn(vs ...int) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldPort, vs...))
}

// PortGT applies the GT predicate on the "port" field.
func PortGT(v int) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldPort, v))
}

// PortGTE applies the GTE predicate on the "port" field.
func PortGTE(v int) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldPort, v))
}

// PortLT applies the LT predicate on the "port" field.
func PortLT(v int) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldPort, v))
}

// PortLTE applies the LTE predicate on the "port" field.
func PortLTE(v int) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldPort, v))
}

// HostEQ applies the EQ predicate on the "host" field.
func HostEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldHost, v))
}

// HostNEQ applies the NEQ predicate on the "host" field.
func HostNEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldHost, v))
}

// HostIn applies the In predicate on the "host" field.
func HostIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldHost, vs...))
}

// HostNotIn applies the NotIn predicate on the "host" field.
func HostNotIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldHost, vs...))
}

// HostGT applies the GT predicate on the "host" field.
func HostGT(v string) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldHost, v))
}

// HostGTE applies the GTE predicate on the "host" field.
func HostGTE(v string) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldHost, v))
}

// HostLT applies the LT predicate on the "host" field.
func HostLT(v string) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldHost, v))
}

// HostLTE applies the LTE predicate on the "host" field.
func HostLTE(v string) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldHost, v))
}

// HostContains applies the Contains predicate on the "host" field.
func HostContains(v string) predicate.Server {
	return predicate.Server(sql.FieldContains(FieldHost, v))
}

// HostHasPrefix applies the HasPrefix predicate on the "host" field.
func HostHasPrefix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasPrefix(FieldHost, v))
}

// HostHasSuffix applies the HasSuffix predicate on the "host" field.
func HostHasSuffix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasSuffix(FieldHost, v))
}

// HostEqualFold applies the EqualFold predicate on the "host" field.
func HostEqualFold(v string) predicate.Server {
	return predicate.Server(sql.FieldEqualFold(FieldHost, v))
}

// HostContainsFold applies the ContainsFold predicate on the "host" field.
func HostContainsFold(v string) predicate.Server {
	return predicate.Server(sql.FieldContainsFold(FieldHost, v))
}

// PlatformEQ applies the EQ predicate on the "platform" field.
func PlatformEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldPlatform, v))
}

// PlatformNEQ applies the NEQ predicate on the "platform" field.
func PlatformNEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldPlatform, v))
}

// PlatformIn applies the In predicate on the "platform" field.
func PlatformIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldPlatform, vs...))
}

// PlatformNotIn applies the NotIn predicate on the "platform" field.
func PlatformNotIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldPlatform, vs...))
}

// PlatformGT applies the GT predicate on the "platform" field.
func PlatformGT(v string) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldPlatform, v))
}

// PlatformGTE applies the GTE predicate on the "platform" field.
func PlatformGTE(v string) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldPlatform, v))
}

// PlatformLT applies the LT predicate on the "platform" field.
func PlatformLT(v string) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldPlatform, v))
}

// PlatformLTE applies the LTE predicate on the "platform" field.
func PlatformLTE(v string) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldPlatform, v))
}

// PlatformContains applies the Contains predicate on the "platform" field.
func PlatformContains(v string) predicate.Server {
	return predicate.Server(sql.FieldContains(FieldPlatform, v))
}

// PlatformHasPrefix applies the HasPrefix predicate on the "platform" field.
func PlatformHasPrefix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasPrefix(FieldPlatform, v))
}

// PlatformHasSuffix applies the HasSuffix predicate on the "platform" field.
func PlatformHasSuffix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasSuffix(FieldPlatform, v))
}

// PlatformEqualFold applies the EqualFold predicate on the "platform" field.
func PlatformEqualFold(v string) predicate.Server {
	return predicate.Server(sql.FieldEqualFold(FieldPlatform, v))
}

// PlatformContainsFold applies the ContainsFold predicate on the "platform" field.
func PlatformContainsFold(v string) predicate.Server {
	return predicate.Server(sql.FieldContainsFold(FieldPlatform, v))
}

// ClanOnlyEQ applies the EQ predicate on the "clan_only" field.
func ClanOnlyEQ(v bool) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldClanOnly, v))
}

// ClanOnlyNEQ applies the NEQ predicate on the "clan_only" field.
func ClanOnlyNEQ(v bool) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldClanOnly, v))
}

// LanOnlyEQ applies the EQ predicate on the "lan_only" field.
func LanOnlyEQ(v bool) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldLanOnly, v))
}

// LanOnlyNEQ applies the NEQ predicate on the "lan_only" field.
func LanOnlyNEQ(v bool) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldLanOnly, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Server {
	return predicate.Server(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Server {
	return predicate.Server(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Server {
	return predicate.Server(sql.FieldContainsFold(FieldName, v))
}

// GameModeEQ applies the EQ predicate on the "game_mode" field.
func GameModeEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldGameMode, v))
}

// GameModeNEQ applies the NEQ predicate on the "game_mode" field.
func GameModeNEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldGameMode, v))
}

// GameModeIn applies the In predicate on the "game_mode" field.
func GameModeIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldGameMode, vs...))
}

// GameModeNotIn applies the NotIn predicate on the "game_mode" field.
func GameModeNotIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldGameMode, vs...))
}

// GameModeGT applies the GT predicate on the "game_mode" field.
func GameModeGT(v string) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldGameMode, v))
}

// GameModeGTE applies the GTE predicate on the "game_mode" field.
func GameModeGTE(v string) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldGameMode, v))
}

// GameModeLT applies the LT predicate on the "game_mode" field.
func GameModeLT(v string) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldGameMode, v))
}

// GameModeLTE applies the LTE predicate on the "game_mode" field.
func GameModeLTE(v string) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldGameMode, v))
}

// GameModeContains applies the Contains predicate on the "game_mode" field.
func GameModeContains(v string) predicate.Server {
	return predicate.Server(sql.FieldContains(FieldGameMode, v))
}

// GameModeHasPrefix applies the HasPrefix predicate on the "game_mode" field.
func GameModeHasPrefix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasPrefix(FieldGameMode, v))
}

// GameModeHasSuffix applies the HasSuffix predicate on the "game_mode" field.
func GameModeHasSuffix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasSuffix(FieldGameMode, v))
}

// GameModeEqualFold applies the EqualFold predicate on the "game_mode" field.
func GameModeEqualFold(v string) predicate.Server {
	return predicate.Server(sql.FieldEqualFold(FieldGameMode, v))
}

// GameModeContainsFold applies the ContainsFold predicate on the "game_mode" field.
func GameModeContainsFold(v string) predicate.Server {
	return predicate.Server(sql.FieldContainsFold(FieldGameMode, v))
}

// IntentEQ applies the EQ predicate on the "intent" field.
func IntentEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldIntent, v))
}

// IntentNEQ applies the NEQ predicate on the "intent" field.
func IntentNEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldIntent, v))
}

// IntentIn applies the In predicate on the "intent" field.
func IntentIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldIntent, vs...))
}

// IntentNotIn applies the NotIn predicate on the "intent" field.
func IntentNotIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldIntent, vs...))
}

// IntentGT applies the GT predicate on the "intent" field.
func IntentGT(v string) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldIntent, v))
}

// IntentGTE applies the GTE predicate on the "intent" field.
func IntentGTE(v string) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldIntent, v))
}

// IntentLT applies the LT predicate on the "intent" field.
func IntentLT(v string) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldIntent, v))
}

// IntentLTE applies the LTE predicate on the "intent" field.
func IntentLTE(v string) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldIntent, v))
}

// IntentContains applies the Contains predicate on the "intent" field.
func IntentContains(v string) predicate.Server {
	return predicate.Server(sql.FieldContains(FieldIntent, v))
}

// IntentHasPrefix applies the HasPrefix predicate on the "intent" field.
func IntentHasPrefix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasPrefix(FieldIntent, v))
}

// IntentHasSuffix applies the HasSuffix predicate on the "intent" field.
func IntentHasSuffix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasSuffix(FieldIntent, v))
}

// IntentEqualFold applies the EqualFold predicate on the "intent" field.
func IntentEqualFold(v string) predicate.Server {
	return predicate.Server(sql.FieldEqualFold(FieldIntent, v))
}

// IntentContainsFold applies the ContainsFold predicate on the "intent" field.
func IntentContainsFold(v string) predicate.Server {
	return predicate.Server(sql.FieldContainsFold(FieldIntent, v))
}

// SeasonEQ applies the EQ predicate on the "season" field.
func SeasonEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldSeason, v))
}

// SeasonNEQ applies the NEQ predicate on the "season" field.
func SeasonNEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldSeason, v))
}

// SeasonIn applies the In predicate on the "season" field.
func SeasonIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldSeason, vs...))
}

// SeasonNotIn applies the NotIn predicate on the "season" field.
func SeasonNotIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldSeason, vs...))
}

// SeasonGT applies the GT predicate on the "season" field.
func SeasonGT(v string) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldSeason, v))
}

// SeasonGTE applies the GTE predicate on the "season" field.
func SeasonGTE(v string) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldSeason, v))
}

// SeasonLT applies the LT predicate on the "season" field.
func SeasonLT(v string) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldSeason, v))
}

// SeasonLTE applies the LTE predicate on the "season" field.
func SeasonLTE(v string) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldSeason, v))
}

// SeasonContains applies the Contains predicate on the "season" field.
func SeasonContains(v string) predicate.Server {
	return predicate.Server(sql.FieldContains(FieldSeason, v))
}

// SeasonHasPrefix applies the HasPrefix predicate on the "season" field.
func SeasonHasPrefix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasPrefix(FieldSeason, v))
}

// SeasonHasSuffix applies the HasSuffix predicate on the "season" field.
func SeasonHasSuffix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasSuffix(FieldSeason, v))
}

// SeasonEqualFold applies the EqualFold predicate on the "season" field.
func SeasonEqualFold(v string) predicate.Server {
	return predicate.Server(sql.FieldEqualFold(FieldSeason, v))
}

// SeasonContainsFold applies the ContainsFold predicate on the "season" field.
func SeasonContainsFold(v string) predicate.Server {
	return predicate.Server(sql.FieldContainsFold(FieldSeason, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldVersion, v))
}

// MaxOnlineEQ applies the EQ predicate on the "max_online" field.
func MaxOnlineEQ(v int) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldMaxOnline, v))
}

// MaxOnlineNEQ applies the NEQ predicate on the "max_online" field.
func MaxOnlineNEQ(v int) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldMaxOnline, v))
}

// MaxOnlineIn applies the In predicate on the "max_online" field.
func MaxOnlineIn(vs ...int) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldMaxOnline, vs...))
}

// MaxOnlineNotIn applies the NotIn predicate on the "max_online" field.
func MaxOnlineNotIn(vs ...int) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldMaxOnline, vs...))
}

// MaxOnlineGT applies the GT predicate on the "max_online" field.
func MaxOnlineGT(v int) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldMaxOnline, v))
}

// MaxOnlineGTE applies the GTE predicate on the "max_online" field.
func MaxOnlineGTE(v int) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldMaxOnline, v))
}

// MaxOnlineLT applies the LT predicate on the "max_online" field.
func MaxOnlineLT(v int) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldMaxOnline, v))
}

// MaxOnlineLTE applies the LTE predicate on the "max_online" field.
func MaxOnlineLTE(v int) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldMaxOnline, v))
}

// OnlineEQ applies the EQ predicate on the "online" field.
func OnlineEQ(v int) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldOnline, v))
}

// OnlineNEQ applies the NEQ predicate on the "online" field.
func OnlineNEQ(v int) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldOnline, v))
}

// OnlineIn applies the In predicate on the "online" field.
func OnlineIn(vs ...int) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldOnline, vs...))
}

// OnlineNotIn applies the NotIn predicate on the "online" field.
func OnlineNotIn(vs ...int) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldOnline, vs...))
}

// OnlineGT applies the GT predicate on the "online" field.
func OnlineGT(v int) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldOnline, v))
}

// OnlineGTE applies the GTE predicate on the "online" field.
func OnlineGTE(v int) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldOnline, v))
}

// OnlineLT applies the LT predicate on the "online" field.
func OnlineLT(v int) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldOnline, v))
}

// OnlineLTE applies the LTE predicate on the "online" field.
func OnlineLTE(v int) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldOnline, v))
}

// LevelEQ applies the EQ predicate on the "level" field.
func LevelEQ(v int) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldLevel, v))
}

// LevelNEQ applies the NEQ predicate on the "level" field.
func LevelNEQ(v int) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldLevel, v))
}

// LevelIn applies the In predicate on the "level" field.
func LevelIn(vs ...int) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldLevel, vs...))
}

// LevelNotIn applies the NotIn predicate on the "level" field.
func LevelNotIn(vs ...int) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldLevel, vs...))
}

// LevelGT applies the GT predicate on the "level" field.
func LevelGT(v int) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldLevel, v))
}

// LevelGTE applies the GTE predicate on the "level" field.
func LevelGTE(v int) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldLevel, v))
}

// LevelLT applies the LT predicate on the "level" field.
func LevelLT(v int) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldLevel, v))
}

// LevelLTE applies the LTE predicate on the "level" field.
func LevelLTE(v int) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldLevel, v))
}

// ModEQ applies the EQ predicate on the "mod" field.
func ModEQ(v bool) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldMod, v))
}

// ModNEQ applies the NEQ predicate on the "mod" field.
func ModNEQ(v bool) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldMod, v))
}

// PvpEQ applies the EQ predicate on the "pvp" field.
func PvpEQ(v bool) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldPvp, v))
}

// PvpNEQ applies the NEQ predicate on the "pvp" field.
func PvpNEQ(v bool) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldPvp, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v bool) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v bool) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldPassword, v))
}

// DedicatedEQ applies the EQ predicate on the "dedicated" field.
func DedicatedEQ(v bool) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldDedicated, v))
}

// DedicatedNEQ applies the NEQ predicate on the "dedicated" field.
func DedicatedNEQ(v bool) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldDedicated, v))
}

// ClientHostedEQ applies the EQ predicate on the "client_hosted" field.
func ClientHostedEQ(v bool) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldClientHosted, v))
}

// ClientHostedNEQ applies the NEQ predicate on the "client_hosted" field.
func ClientHostedNEQ(v bool) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldClientHosted, v))
}

// AllowNewPlayersEQ applies the EQ predicate on the "allow_new_players" field.
func AllowNewPlayersEQ(v bool) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldAllowNewPlayers, v))
}

// AllowNewPlayersNEQ applies the NEQ predicate on the "allow_new_players" field.
func AllowNewPlayersNEQ(v bool) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldAllowNewPlayers, v))
}

// ServerPausedEQ applies the EQ predicate on the "server_paused" field.
func ServerPausedEQ(v bool) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldServerPaused, v))
}

// ServerPausedNEQ applies the NEQ predicate on the "server_paused" field.
func ServerPausedNEQ(v bool) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldServerPaused, v))
}

// FriendOnlyEQ applies the EQ predicate on the "friend_only" field.
func FriendOnlyEQ(v bool) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldFriendOnly, v))
}

// FriendOnlyNEQ applies the NEQ predicate on the "friend_only" field.
func FriendOnlyNEQ(v bool) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldFriendOnly, v))
}

// QueryVersionEQ applies the EQ predicate on the "query_version" field.
func QueryVersionEQ(v int64) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldQueryVersion, v))
}

// QueryVersionNEQ applies the NEQ predicate on the "query_version" field.
func QueryVersionNEQ(v int64) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldQueryVersion, v))
}

// QueryVersionIn applies the In predicate on the "query_version" field.
func QueryVersionIn(vs ...int64) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldQueryVersion, vs...))
}

// QueryVersionNotIn applies the NotIn predicate on the "query_version" field.
func QueryVersionNotIn(vs ...int64) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldQueryVersion, vs...))
}

// QueryVersionGT applies the GT predicate on the "query_version" field.
func QueryVersionGT(v int64) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldQueryVersion, v))
}

// QueryVersionGTE applies the GTE predicate on the "query_version" field.
func QueryVersionGTE(v int64) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldQueryVersion, v))
}

// QueryVersionLT applies the LT predicate on the "query_version" field.
func QueryVersionLT(v int64) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldQueryVersion, v))
}

// QueryVersionLTE applies the LTE predicate on the "query_version" field.
func QueryVersionLTE(v int64) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldQueryVersion, v))
}

// CountryEQ applies the EQ predicate on the "country" field.
func CountryEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldCountry, v))
}

// CountryNEQ applies the NEQ predicate on the "country" field.
func CountryNEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldCountry, v))
}

// CountryIn applies the In predicate on the "country" field.
func CountryIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldCountry, vs...))
}

// CountryNotIn applies the NotIn predicate on the "country" field.
func CountryNotIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldCountry, vs...))
}

// CountryGT applies the GT predicate on the "country" field.
func CountryGT(v string) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldCountry, v))
}

// CountryGTE applies the GTE predicate on the "country" field.
func CountryGTE(v string) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldCountry, v))
}

// CountryLT applies the LT predicate on the "country" field.
func CountryLT(v string) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldCountry, v))
}

// CountryLTE applies the LTE predicate on the "country" field.
func CountryLTE(v string) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldCountry, v))
}

// CountryContains applies the Contains predicate on the "country" field.
func CountryContains(v string) predicate.Server {
	return predicate.Server(sql.FieldContains(FieldCountry, v))
}

// CountryHasPrefix applies the HasPrefix predicate on the "country" field.
func CountryHasPrefix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasPrefix(FieldCountry, v))
}

// CountryHasSuffix applies the HasSuffix predicate on the "country" field.
func CountryHasSuffix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasSuffix(FieldCountry, v))
}

// CountryEqualFold applies the EqualFold predicate on the "country" field.
func CountryEqualFold(v string) predicate.Server {
	return predicate.Server(sql.FieldEqualFold(FieldCountry, v))
}

// CountryContainsFold applies the ContainsFold predicate on the "country" field.
func CountryContainsFold(v string) predicate.Server {
	return predicate.Server(sql.FieldContainsFold(FieldCountry, v))
}

// ContinentEQ applies the EQ predicate on the "continent" field.
func ContinentEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldContinent, v))
}

// ContinentNEQ applies the NEQ predicate on the "continent" field.
func ContinentNEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldContinent, v))
}

// ContinentIn applies the In predicate on the "continent" field.
func ContinentIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldContinent, vs...))
}

// ContinentNotIn applies the NotIn predicate on the "continent" field.
func ContinentNotIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldContinent, vs...))
}

// ContinentGT applies the GT predicate on the "continent" field.
func ContinentGT(v string) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldContinent, v))
}

// ContinentGTE applies the GTE predicate on the "continent" field.
func ContinentGTE(v string) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldContinent, v))
}

// ContinentLT applies the LT predicate on the "continent" field.
func ContinentLT(v string) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldContinent, v))
}

// ContinentLTE applies the LTE predicate on the "continent" field.
func ContinentLTE(v string) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldContinent, v))
}

// ContinentContains applies the Contains predicate on the "continent" field.
func ContinentContains(v string) predicate.Server {
	return predicate.Server(sql.FieldContains(FieldContinent, v))
}

// ContinentHasPrefix applies the HasPrefix predicate on the "continent" field.
func ContinentHasPrefix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasPrefix(FieldContinent, v))
}

// ContinentHasSuffix applies the HasSuffix predicate on the "continent" field.
func ContinentHasSuffix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasSuffix(FieldContinent, v))
}

// ContinentEqualFold applies the EqualFold predicate on the "continent" field.
func ContinentEqualFold(v string) predicate.Server {
	return predicate.Server(sql.FieldEqualFold(FieldContinent, v))
}

// ContinentContainsFold applies the ContainsFold predicate on the "continent" field.
func ContinentContainsFold(v string) predicate.Server {
	return predicate.Server(sql.FieldContainsFold(FieldContinent, v))
}

// CountryCodeEQ applies the EQ predicate on the "country_code" field.
func CountryCodeEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldCountryCode, v))
}

// CountryCodeNEQ applies the NEQ predicate on the "country_code" field.
func CountryCodeNEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldCountryCode, v))
}

// CountryCodeIn applies the In predicate on the "country_code" field.
func CountryCodeIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldCountryCode, vs...))
}

// CountryCodeNotIn applies the NotIn predicate on the "country_code" field.
func CountryCodeNotIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldCountryCode, vs...))
}

// CountryCodeGT applies the GT predicate on the "country_code" field.
func CountryCodeGT(v string) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldCountryCode, v))
}

// CountryCodeGTE applies the GTE predicate on the "country_code" field.
func CountryCodeGTE(v string) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldCountryCode, v))
}

// CountryCodeLT applies the LT predicate on the "country_code" field.
func CountryCodeLT(v string) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldCountryCode, v))
}

// CountryCodeLTE applies the LTE predicate on the "country_code" field.
func CountryCodeLTE(v string) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldCountryCode, v))
}

// CountryCodeContains applies the Contains predicate on the "country_code" field.
func CountryCodeContains(v string) predicate.Server {
	return predicate.Server(sql.FieldContains(FieldCountryCode, v))
}

// CountryCodeHasPrefix applies the HasPrefix predicate on the "country_code" field.
func CountryCodeHasPrefix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasPrefix(FieldCountryCode, v))
}

// CountryCodeHasSuffix applies the HasSuffix predicate on the "country_code" field.
func CountryCodeHasSuffix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasSuffix(FieldCountryCode, v))
}

// CountryCodeEqualFold applies the EqualFold predicate on the "country_code" field.
func CountryCodeEqualFold(v string) predicate.Server {
	return predicate.Server(sql.FieldEqualFold(FieldCountryCode, v))
}

// CountryCodeContainsFold applies the ContainsFold predicate on the "country_code" field.
func CountryCodeContainsFold(v string) predicate.Server {
	return predicate.Server(sql.FieldContainsFold(FieldCountryCode, v))
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldCity, v))
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldCity, v))
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldCity, vs...))
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldCity, vs...))
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldCity, v))
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldCity, v))
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldCity, v))
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldCity, v))
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.Server {
	return predicate.Server(sql.FieldContains(FieldCity, v))
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasPrefix(FieldCity, v))
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasSuffix(FieldCity, v))
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.Server {
	return predicate.Server(sql.FieldEqualFold(FieldCity, v))
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.Server {
	return predicate.Server(sql.FieldContainsFold(FieldCity, v))
}

// RegionEQ applies the EQ predicate on the "region" field.
func RegionEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldRegion, v))
}

// RegionNEQ applies the NEQ predicate on the "region" field.
func RegionNEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldRegion, v))
}

// RegionIn applies the In predicate on the "region" field.
func RegionIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldRegion, vs...))
}

// RegionNotIn applies the NotIn predicate on the "region" field.
func RegionNotIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldRegion, vs...))
}

// RegionGT applies the GT predicate on the "region" field.
func RegionGT(v string) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldRegion, v))
}

// RegionGTE applies the GTE predicate on the "region" field.
func RegionGTE(v string) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldRegion, v))
}

// RegionLT applies the LT predicate on the "region" field.
func RegionLT(v string) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldRegion, v))
}

// RegionLTE applies the LTE predicate on the "region" field.
func RegionLTE(v string) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldRegion, v))
}

// RegionContains applies the Contains predicate on the "region" field.
func RegionContains(v string) predicate.Server {
	return predicate.Server(sql.FieldContains(FieldRegion, v))
}

// RegionHasPrefix applies the HasPrefix predicate on the "region" field.
func RegionHasPrefix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasPrefix(FieldRegion, v))
}

// RegionHasSuffix applies the HasSuffix predicate on the "region" field.
func RegionHasSuffix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasSuffix(FieldRegion, v))
}

// RegionEqualFold applies the EqualFold predicate on the "region" field.
func RegionEqualFold(v string) predicate.Server {
	return predicate.Server(sql.FieldEqualFold(FieldRegion, v))
}

// RegionContainsFold applies the ContainsFold predicate on the "region" field.
func RegionContainsFold(v string) predicate.Server {
	return predicate.Server(sql.FieldContainsFold(FieldRegion, v))
}

// HasTags applies the HasEdge predicate on the "tags" edge.
func HasTags() predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TagsTable, TagsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTagsWith applies the HasEdge predicate on the "tags" edge with a given conditions (other predicates).
func HasTagsWith(preds ...predicate.Tag) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		step := newTagsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSecondaries applies the HasEdge predicate on the "secondaries" edge.
func HasSecondaries() predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SecondariesTable, SecondariesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSecondariesWith applies the HasEdge predicate on the "secondaries" edge with a given conditions (other predicates).
func HasSecondariesWith(preds ...predicate.Secondary) predicate.Server {
	return predicate.Server(func(s *sql.Selector) {
		step := newSecondariesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Server) predicate.Server {
	return predicate.Server(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Server) predicate.Server {
	return predicate.Server(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Server) predicate.Server {
	return predicate.Server(sql.NotPredicates(p))
}
