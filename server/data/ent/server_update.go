// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dstgo/lobby/server/data/ent/predicate"
	"github.com/dstgo/lobby/server/data/ent/secondary"
	"github.com/dstgo/lobby/server/data/ent/server"
	"github.com/dstgo/lobby/server/data/ent/tag"
)

// ServerUpdate is the builder for updating Server entities.
type ServerUpdate struct {
	config
	hooks    []Hook
	mutation *ServerMutation
}

// Where appends a list predicates to the ServerUpdate builder.
func (su *ServerUpdate) Where(ps ...predicate.Server) *ServerUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetGUID sets the "guid" field.
func (su *ServerUpdate) SetGUID(s string) *ServerUpdate {
	su.mutation.SetGUID(s)
	return su
}

// SetNillableGUID sets the "guid" field if the given value is not nil.
func (su *ServerUpdate) SetNillableGUID(s *string) *ServerUpdate {
	if s != nil {
		su.SetGUID(*s)
	}
	return su
}

// SetRowID sets the "row_id" field.
func (su *ServerUpdate) SetRowID(s string) *ServerUpdate {
	su.mutation.SetRowID(s)
	return su
}

// SetNillableRowID sets the "row_id" field if the given value is not nil.
func (su *ServerUpdate) SetNillableRowID(s *string) *ServerUpdate {
	if s != nil {
		su.SetRowID(*s)
	}
	return su
}

// SetSteamID sets the "steam_id" field.
func (su *ServerUpdate) SetSteamID(s string) *ServerUpdate {
	su.mutation.SetSteamID(s)
	return su
}

// SetNillableSteamID sets the "steam_id" field if the given value is not nil.
func (su *ServerUpdate) SetNillableSteamID(s *string) *ServerUpdate {
	if s != nil {
		su.SetSteamID(*s)
	}
	return su
}

// SetSteamClanID sets the "steam_clan_id" field.
func (su *ServerUpdate) SetSteamClanID(s string) *ServerUpdate {
	su.mutation.SetSteamClanID(s)
	return su
}

// SetNillableSteamClanID sets the "steam_clan_id" field if the given value is not nil.
func (su *ServerUpdate) SetNillableSteamClanID(s *string) *ServerUpdate {
	if s != nil {
		su.SetSteamClanID(*s)
	}
	return su
}

// SetOwnerID sets the "owner_id" field.
func (su *ServerUpdate) SetOwnerID(s string) *ServerUpdate {
	su.mutation.SetOwnerID(s)
	return su
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (su *ServerUpdate) SetNillableOwnerID(s *string) *ServerUpdate {
	if s != nil {
		su.SetOwnerID(*s)
	}
	return su
}

// SetSteamRoom sets the "steam_room" field.
func (su *ServerUpdate) SetSteamRoom(s string) *ServerUpdate {
	su.mutation.SetSteamRoom(s)
	return su
}

// SetNillableSteamRoom sets the "steam_room" field if the given value is not nil.
func (su *ServerUpdate) SetNillableSteamRoom(s *string) *ServerUpdate {
	if s != nil {
		su.SetSteamRoom(*s)
	}
	return su
}

// SetSession sets the "session" field.
func (su *ServerUpdate) SetSession(s string) *ServerUpdate {
	su.mutation.SetSession(s)
	return su
}

// SetNillableSession sets the "session" field if the given value is not nil.
func (su *ServerUpdate) SetNillableSession(s *string) *ServerUpdate {
	if s != nil {
		su.SetSession(*s)
	}
	return su
}

// SetAddress sets the "address" field.
func (su *ServerUpdate) SetAddress(s string) *ServerUpdate {
	su.mutation.SetAddress(s)
	return su
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (su *ServerUpdate) SetNillableAddress(s *string) *ServerUpdate {
	if s != nil {
		su.SetAddress(*s)
	}
	return su
}

// SetPort sets the "port" field.
func (su *ServerUpdate) SetPort(i int) *ServerUpdate {
	su.mutation.ResetPort()
	su.mutation.SetPort(i)
	return su
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (su *ServerUpdate) SetNillablePort(i *int) *ServerUpdate {
	if i != nil {
		su.SetPort(*i)
	}
	return su
}

// AddPort adds i to the "port" field.
func (su *ServerUpdate) AddPort(i int) *ServerUpdate {
	su.mutation.AddPort(i)
	return su
}

// SetHost sets the "host" field.
func (su *ServerUpdate) SetHost(s string) *ServerUpdate {
	su.mutation.SetHost(s)
	return su
}

// SetNillableHost sets the "host" field if the given value is not nil.
func (su *ServerUpdate) SetNillableHost(s *string) *ServerUpdate {
	if s != nil {
		su.SetHost(*s)
	}
	return su
}

// SetPlatform sets the "platform" field.
func (su *ServerUpdate) SetPlatform(s string) *ServerUpdate {
	su.mutation.SetPlatform(s)
	return su
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (su *ServerUpdate) SetNillablePlatform(s *string) *ServerUpdate {
	if s != nil {
		su.SetPlatform(*s)
	}
	return su
}

// SetClanOnly sets the "clan_only" field.
func (su *ServerUpdate) SetClanOnly(b bool) *ServerUpdate {
	su.mutation.SetClanOnly(b)
	return su
}

// SetNillableClanOnly sets the "clan_only" field if the given value is not nil.
func (su *ServerUpdate) SetNillableClanOnly(b *bool) *ServerUpdate {
	if b != nil {
		su.SetClanOnly(*b)
	}
	return su
}

// SetLanOnly sets the "lan_only" field.
func (su *ServerUpdate) SetLanOnly(b bool) *ServerUpdate {
	su.mutation.SetLanOnly(b)
	return su
}

// SetNillableLanOnly sets the "lan_only" field if the given value is not nil.
func (su *ServerUpdate) SetNillableLanOnly(b *bool) *ServerUpdate {
	if b != nil {
		su.SetLanOnly(*b)
	}
	return su
}

// SetName sets the "name" field.
func (su *ServerUpdate) SetName(s string) *ServerUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *ServerUpdate) SetNillableName(s *string) *ServerUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetGameMode sets the "game_mode" field.
func (su *ServerUpdate) SetGameMode(s string) *ServerUpdate {
	su.mutation.SetGameMode(s)
	return su
}

// SetNillableGameMode sets the "game_mode" field if the given value is not nil.
func (su *ServerUpdate) SetNillableGameMode(s *string) *ServerUpdate {
	if s != nil {
		su.SetGameMode(*s)
	}
	return su
}

// SetIntent sets the "intent" field.
func (su *ServerUpdate) SetIntent(s string) *ServerUpdate {
	su.mutation.SetIntent(s)
	return su
}

// SetNillableIntent sets the "intent" field if the given value is not nil.
func (su *ServerUpdate) SetNillableIntent(s *string) *ServerUpdate {
	if s != nil {
		su.SetIntent(*s)
	}
	return su
}

// SetSeason sets the "season" field.
func (su *ServerUpdate) SetSeason(s string) *ServerUpdate {
	su.mutation.SetSeason(s)
	return su
}

// SetNillableSeason sets the "season" field if the given value is not nil.
func (su *ServerUpdate) SetNillableSeason(s *string) *ServerUpdate {
	if s != nil {
		su.SetSeason(*s)
	}
	return su
}

// SetVersion sets the "version" field.
func (su *ServerUpdate) SetVersion(i int) *ServerUpdate {
	su.mutation.ResetVersion()
	su.mutation.SetVersion(i)
	return su
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (su *ServerUpdate) SetNillableVersion(i *int) *ServerUpdate {
	if i != nil {
		su.SetVersion(*i)
	}
	return su
}

// AddVersion adds i to the "version" field.
func (su *ServerUpdate) AddVersion(i int) *ServerUpdate {
	su.mutation.AddVersion(i)
	return su
}

// SetMaxOnline sets the "max_online" field.
func (su *ServerUpdate) SetMaxOnline(i int) *ServerUpdate {
	su.mutation.ResetMaxOnline()
	su.mutation.SetMaxOnline(i)
	return su
}

// SetNillableMaxOnline sets the "max_online" field if the given value is not nil.
func (su *ServerUpdate) SetNillableMaxOnline(i *int) *ServerUpdate {
	if i != nil {
		su.SetMaxOnline(*i)
	}
	return su
}

// AddMaxOnline adds i to the "max_online" field.
func (su *ServerUpdate) AddMaxOnline(i int) *ServerUpdate {
	su.mutation.AddMaxOnline(i)
	return su
}

// SetOnline sets the "online" field.
func (su *ServerUpdate) SetOnline(i int) *ServerUpdate {
	su.mutation.ResetOnline()
	su.mutation.SetOnline(i)
	return su
}

// SetNillableOnline sets the "online" field if the given value is not nil.
func (su *ServerUpdate) SetNillableOnline(i *int) *ServerUpdate {
	if i != nil {
		su.SetOnline(*i)
	}
	return su
}

// AddOnline adds i to the "online" field.
func (su *ServerUpdate) AddOnline(i int) *ServerUpdate {
	su.mutation.AddOnline(i)
	return su
}

// SetLevel sets the "level" field.
func (su *ServerUpdate) SetLevel(i int) *ServerUpdate {
	su.mutation.ResetLevel()
	su.mutation.SetLevel(i)
	return su
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (su *ServerUpdate) SetNillableLevel(i *int) *ServerUpdate {
	if i != nil {
		su.SetLevel(*i)
	}
	return su
}

// AddLevel adds i to the "level" field.
func (su *ServerUpdate) AddLevel(i int) *ServerUpdate {
	su.mutation.AddLevel(i)
	return su
}

// SetMod sets the "mod" field.
func (su *ServerUpdate) SetMod(b bool) *ServerUpdate {
	su.mutation.SetMod(b)
	return su
}

// SetNillableMod sets the "mod" field if the given value is not nil.
func (su *ServerUpdate) SetNillableMod(b *bool) *ServerUpdate {
	if b != nil {
		su.SetMod(*b)
	}
	return su
}

// SetPvp sets the "pvp" field.
func (su *ServerUpdate) SetPvp(b bool) *ServerUpdate {
	su.mutation.SetPvp(b)
	return su
}

// SetNillablePvp sets the "pvp" field if the given value is not nil.
func (su *ServerUpdate) SetNillablePvp(b *bool) *ServerUpdate {
	if b != nil {
		su.SetPvp(*b)
	}
	return su
}

// SetPassword sets the "password" field.
func (su *ServerUpdate) SetPassword(b bool) *ServerUpdate {
	su.mutation.SetPassword(b)
	return su
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (su *ServerUpdate) SetNillablePassword(b *bool) *ServerUpdate {
	if b != nil {
		su.SetPassword(*b)
	}
	return su
}

// SetDedicated sets the "dedicated" field.
func (su *ServerUpdate) SetDedicated(b bool) *ServerUpdate {
	su.mutation.SetDedicated(b)
	return su
}

// SetNillableDedicated sets the "dedicated" field if the given value is not nil.
func (su *ServerUpdate) SetNillableDedicated(b *bool) *ServerUpdate {
	if b != nil {
		su.SetDedicated(*b)
	}
	return su
}

// SetClientHosted sets the "client_hosted" field.
func (su *ServerUpdate) SetClientHosted(b bool) *ServerUpdate {
	su.mutation.SetClientHosted(b)
	return su
}

// SetNillableClientHosted sets the "client_hosted" field if the given value is not nil.
func (su *ServerUpdate) SetNillableClientHosted(b *bool) *ServerUpdate {
	if b != nil {
		su.SetClientHosted(*b)
	}
	return su
}

// SetAllowNewPlayers sets the "allow_new_players" field.
func (su *ServerUpdate) SetAllowNewPlayers(b bool) *ServerUpdate {
	su.mutation.SetAllowNewPlayers(b)
	return su
}

// SetNillableAllowNewPlayers sets the "allow_new_players" field if the given value is not nil.
func (su *ServerUpdate) SetNillableAllowNewPlayers(b *bool) *ServerUpdate {
	if b != nil {
		su.SetAllowNewPlayers(*b)
	}
	return su
}

// SetServerPaused sets the "server_paused" field.
func (su *ServerUpdate) SetServerPaused(b bool) *ServerUpdate {
	su.mutation.SetServerPaused(b)
	return su
}

// SetNillableServerPaused sets the "server_paused" field if the given value is not nil.
func (su *ServerUpdate) SetNillableServerPaused(b *bool) *ServerUpdate {
	if b != nil {
		su.SetServerPaused(*b)
	}
	return su
}

// SetFriendOnly sets the "friend_only" field.
func (su *ServerUpdate) SetFriendOnly(b bool) *ServerUpdate {
	su.mutation.SetFriendOnly(b)
	return su
}

// SetNillableFriendOnly sets the "friend_only" field if the given value is not nil.
func (su *ServerUpdate) SetNillableFriendOnly(b *bool) *ServerUpdate {
	if b != nil {
		su.SetFriendOnly(*b)
	}
	return su
}

// SetQueryVersion sets the "query_version" field.
func (su *ServerUpdate) SetQueryVersion(i int64) *ServerUpdate {
	su.mutation.ResetQueryVersion()
	su.mutation.SetQueryVersion(i)
	return su
}

// SetNillableQueryVersion sets the "query_version" field if the given value is not nil.
func (su *ServerUpdate) SetNillableQueryVersion(i *int64) *ServerUpdate {
	if i != nil {
		su.SetQueryVersion(*i)
	}
	return su
}

// AddQueryVersion adds i to the "query_version" field.
func (su *ServerUpdate) AddQueryVersion(i int64) *ServerUpdate {
	su.mutation.AddQueryVersion(i)
	return su
}

// SetCountry sets the "country" field.
func (su *ServerUpdate) SetCountry(s string) *ServerUpdate {
	su.mutation.SetCountry(s)
	return su
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (su *ServerUpdate) SetNillableCountry(s *string) *ServerUpdate {
	if s != nil {
		su.SetCountry(*s)
	}
	return su
}

// SetContinent sets the "continent" field.
func (su *ServerUpdate) SetContinent(s string) *ServerUpdate {
	su.mutation.SetContinent(s)
	return su
}

// SetNillableContinent sets the "continent" field if the given value is not nil.
func (su *ServerUpdate) SetNillableContinent(s *string) *ServerUpdate {
	if s != nil {
		su.SetContinent(*s)
	}
	return su
}

// SetCountryCode sets the "country_code" field.
func (su *ServerUpdate) SetCountryCode(s string) *ServerUpdate {
	su.mutation.SetCountryCode(s)
	return su
}

// SetNillableCountryCode sets the "country_code" field if the given value is not nil.
func (su *ServerUpdate) SetNillableCountryCode(s *string) *ServerUpdate {
	if s != nil {
		su.SetCountryCode(*s)
	}
	return su
}

// SetCity sets the "city" field.
func (su *ServerUpdate) SetCity(s string) *ServerUpdate {
	su.mutation.SetCity(s)
	return su
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (su *ServerUpdate) SetNillableCity(s *string) *ServerUpdate {
	if s != nil {
		su.SetCity(*s)
	}
	return su
}

// SetRegion sets the "region" field.
func (su *ServerUpdate) SetRegion(s string) *ServerUpdate {
	su.mutation.SetRegion(s)
	return su
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (su *ServerUpdate) SetNillableRegion(s *string) *ServerUpdate {
	if s != nil {
		su.SetRegion(*s)
	}
	return su
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (su *ServerUpdate) AddTagIDs(ids ...int) *ServerUpdate {
	su.mutation.AddTagIDs(ids...)
	return su
}

// AddTags adds the "tags" edges to the Tag entity.
func (su *ServerUpdate) AddTags(t ...*Tag) *ServerUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.AddTagIDs(ids...)
}

// AddSecondaryIDs adds the "secondaries" edge to the Secondary entity by IDs.
func (su *ServerUpdate) AddSecondaryIDs(ids ...int) *ServerUpdate {
	su.mutation.AddSecondaryIDs(ids...)
	return su
}

// AddSecondaries adds the "secondaries" edges to the Secondary entity.
func (su *ServerUpdate) AddSecondaries(s ...*Secondary) *ServerUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddSecondaryIDs(ids...)
}

// Mutation returns the ServerMutation object of the builder.
func (su *ServerUpdate) Mutation() *ServerMutation {
	return su.mutation
}

// ClearTags clears all "tags" edges to the Tag entity.
func (su *ServerUpdate) ClearTags() *ServerUpdate {
	su.mutation.ClearTags()
	return su
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (su *ServerUpdate) RemoveTagIDs(ids ...int) *ServerUpdate {
	su.mutation.RemoveTagIDs(ids...)
	return su
}

// RemoveTags removes "tags" edges to Tag entities.
func (su *ServerUpdate) RemoveTags(t ...*Tag) *ServerUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.RemoveTagIDs(ids...)
}

// ClearSecondaries clears all "secondaries" edges to the Secondary entity.
func (su *ServerUpdate) ClearSecondaries() *ServerUpdate {
	su.mutation.ClearSecondaries()
	return su
}

// RemoveSecondaryIDs removes the "secondaries" edge to Secondary entities by IDs.
func (su *ServerUpdate) RemoveSecondaryIDs(ids ...int) *ServerUpdate {
	su.mutation.RemoveSecondaryIDs(ids...)
	return su
}

// RemoveSecondaries removes "secondaries" edges to Secondary entities.
func (su *ServerUpdate) RemoveSecondaries(s ...*Secondary) *ServerUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveSecondaryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ServerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ServerUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ServerUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ServerUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *ServerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(server.Table, server.Columns, sqlgraph.NewFieldSpec(server.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.GUID(); ok {
		_spec.SetField(server.FieldGUID, field.TypeString, value)
	}
	if value, ok := su.mutation.RowID(); ok {
		_spec.SetField(server.FieldRowID, field.TypeString, value)
	}
	if value, ok := su.mutation.SteamID(); ok {
		_spec.SetField(server.FieldSteamID, field.TypeString, value)
	}
	if value, ok := su.mutation.SteamClanID(); ok {
		_spec.SetField(server.FieldSteamClanID, field.TypeString, value)
	}
	if value, ok := su.mutation.OwnerID(); ok {
		_spec.SetField(server.FieldOwnerID, field.TypeString, value)
	}
	if value, ok := su.mutation.SteamRoom(); ok {
		_spec.SetField(server.FieldSteamRoom, field.TypeString, value)
	}
	if value, ok := su.mutation.Session(); ok {
		_spec.SetField(server.FieldSession, field.TypeString, value)
	}
	if value, ok := su.mutation.Address(); ok {
		_spec.SetField(server.FieldAddress, field.TypeString, value)
	}
	if value, ok := su.mutation.Port(); ok {
		_spec.SetField(server.FieldPort, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedPort(); ok {
		_spec.AddField(server.FieldPort, field.TypeInt, value)
	}
	if value, ok := su.mutation.Host(); ok {
		_spec.SetField(server.FieldHost, field.TypeString, value)
	}
	if value, ok := su.mutation.Platform(); ok {
		_spec.SetField(server.FieldPlatform, field.TypeString, value)
	}
	if value, ok := su.mutation.ClanOnly(); ok {
		_spec.SetField(server.FieldClanOnly, field.TypeBool, value)
	}
	if value, ok := su.mutation.LanOnly(); ok {
		_spec.SetField(server.FieldLanOnly, field.TypeBool, value)
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(server.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.GameMode(); ok {
		_spec.SetField(server.FieldGameMode, field.TypeString, value)
	}
	if value, ok := su.mutation.Intent(); ok {
		_spec.SetField(server.FieldIntent, field.TypeString, value)
	}
	if value, ok := su.mutation.Season(); ok {
		_spec.SetField(server.FieldSeason, field.TypeString, value)
	}
	if value, ok := su.mutation.Version(); ok {
		_spec.SetField(server.FieldVersion, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedVersion(); ok {
		_spec.AddField(server.FieldVersion, field.TypeInt, value)
	}
	if value, ok := su.mutation.MaxOnline(); ok {
		_spec.SetField(server.FieldMaxOnline, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedMaxOnline(); ok {
		_spec.AddField(server.FieldMaxOnline, field.TypeInt, value)
	}
	if value, ok := su.mutation.Online(); ok {
		_spec.SetField(server.FieldOnline, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedOnline(); ok {
		_spec.AddField(server.FieldOnline, field.TypeInt, value)
	}
	if value, ok := su.mutation.Level(); ok {
		_spec.SetField(server.FieldLevel, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedLevel(); ok {
		_spec.AddField(server.FieldLevel, field.TypeInt, value)
	}
	if value, ok := su.mutation.Mod(); ok {
		_spec.SetField(server.FieldMod, field.TypeBool, value)
	}
	if value, ok := su.mutation.Pvp(); ok {
		_spec.SetField(server.FieldPvp, field.TypeBool, value)
	}
	if value, ok := su.mutation.Password(); ok {
		_spec.SetField(server.FieldPassword, field.TypeBool, value)
	}
	if value, ok := su.mutation.Dedicated(); ok {
		_spec.SetField(server.FieldDedicated, field.TypeBool, value)
	}
	if value, ok := su.mutation.ClientHosted(); ok {
		_spec.SetField(server.FieldClientHosted, field.TypeBool, value)
	}
	if value, ok := su.mutation.AllowNewPlayers(); ok {
		_spec.SetField(server.FieldAllowNewPlayers, field.TypeBool, value)
	}
	if value, ok := su.mutation.ServerPaused(); ok {
		_spec.SetField(server.FieldServerPaused, field.TypeBool, value)
	}
	if value, ok := su.mutation.FriendOnly(); ok {
		_spec.SetField(server.FieldFriendOnly, field.TypeBool, value)
	}
	if value, ok := su.mutation.QueryVersion(); ok {
		_spec.SetField(server.FieldQueryVersion, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedQueryVersion(); ok {
		_spec.AddField(server.FieldQueryVersion, field.TypeInt64, value)
	}
	if value, ok := su.mutation.Country(); ok {
		_spec.SetField(server.FieldCountry, field.TypeString, value)
	}
	if value, ok := su.mutation.Continent(); ok {
		_spec.SetField(server.FieldContinent, field.TypeString, value)
	}
	if value, ok := su.mutation.CountryCode(); ok {
		_spec.SetField(server.FieldCountryCode, field.TypeString, value)
	}
	if value, ok := su.mutation.City(); ok {
		_spec.SetField(server.FieldCity, field.TypeString, value)
	}
	if value, ok := su.mutation.Region(); ok {
		_spec.SetField(server.FieldRegion, field.TypeString, value)
	}
	if su.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   server.TagsTable,
			Columns: []string{server.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedTagsIDs(); len(nodes) > 0 && !su.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   server.TagsTable,
			Columns: []string{server.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   server.TagsTable,
			Columns: []string{server.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.SecondariesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   server.SecondariesTable,
			Columns: []string{server.SecondariesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(secondary.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedSecondariesIDs(); len(nodes) > 0 && !su.mutation.SecondariesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   server.SecondariesTable,
			Columns: []string{server.SecondariesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(secondary.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SecondariesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   server.SecondariesTable,
			Columns: []string{server.SecondariesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(secondary.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{server.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ServerUpdateOne is the builder for updating a single Server entity.
type ServerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServerMutation
}

// SetGUID sets the "guid" field.
func (suo *ServerUpdateOne) SetGUID(s string) *ServerUpdateOne {
	suo.mutation.SetGUID(s)
	return suo
}

// SetNillableGUID sets the "guid" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableGUID(s *string) *ServerUpdateOne {
	if s != nil {
		suo.SetGUID(*s)
	}
	return suo
}

// SetRowID sets the "row_id" field.
func (suo *ServerUpdateOne) SetRowID(s string) *ServerUpdateOne {
	suo.mutation.SetRowID(s)
	return suo
}

// SetNillableRowID sets the "row_id" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableRowID(s *string) *ServerUpdateOne {
	if s != nil {
		suo.SetRowID(*s)
	}
	return suo
}

// SetSteamID sets the "steam_id" field.
func (suo *ServerUpdateOne) SetSteamID(s string) *ServerUpdateOne {
	suo.mutation.SetSteamID(s)
	return suo
}

// SetNillableSteamID sets the "steam_id" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableSteamID(s *string) *ServerUpdateOne {
	if s != nil {
		suo.SetSteamID(*s)
	}
	return suo
}

// SetSteamClanID sets the "steam_clan_id" field.
func (suo *ServerUpdateOne) SetSteamClanID(s string) *ServerUpdateOne {
	suo.mutation.SetSteamClanID(s)
	return suo
}

// SetNillableSteamClanID sets the "steam_clan_id" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableSteamClanID(s *string) *ServerUpdateOne {
	if s != nil {
		suo.SetSteamClanID(*s)
	}
	return suo
}

// SetOwnerID sets the "owner_id" field.
func (suo *ServerUpdateOne) SetOwnerID(s string) *ServerUpdateOne {
	suo.mutation.SetOwnerID(s)
	return suo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableOwnerID(s *string) *ServerUpdateOne {
	if s != nil {
		suo.SetOwnerID(*s)
	}
	return suo
}

// SetSteamRoom sets the "steam_room" field.
func (suo *ServerUpdateOne) SetSteamRoom(s string) *ServerUpdateOne {
	suo.mutation.SetSteamRoom(s)
	return suo
}

// SetNillableSteamRoom sets the "steam_room" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableSteamRoom(s *string) *ServerUpdateOne {
	if s != nil {
		suo.SetSteamRoom(*s)
	}
	return suo
}

// SetSession sets the "session" field.
func (suo *ServerUpdateOne) SetSession(s string) *ServerUpdateOne {
	suo.mutation.SetSession(s)
	return suo
}

// SetNillableSession sets the "session" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableSession(s *string) *ServerUpdateOne {
	if s != nil {
		suo.SetSession(*s)
	}
	return suo
}

// SetAddress sets the "address" field.
func (suo *ServerUpdateOne) SetAddress(s string) *ServerUpdateOne {
	suo.mutation.SetAddress(s)
	return suo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableAddress(s *string) *ServerUpdateOne {
	if s != nil {
		suo.SetAddress(*s)
	}
	return suo
}

// SetPort sets the "port" field.
func (suo *ServerUpdateOne) SetPort(i int) *ServerUpdateOne {
	suo.mutation.ResetPort()
	suo.mutation.SetPort(i)
	return suo
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillablePort(i *int) *ServerUpdateOne {
	if i != nil {
		suo.SetPort(*i)
	}
	return suo
}

// AddPort adds i to the "port" field.
func (suo *ServerUpdateOne) AddPort(i int) *ServerUpdateOne {
	suo.mutation.AddPort(i)
	return suo
}

// SetHost sets the "host" field.
func (suo *ServerUpdateOne) SetHost(s string) *ServerUpdateOne {
	suo.mutation.SetHost(s)
	return suo
}

// SetNillableHost sets the "host" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableHost(s *string) *ServerUpdateOne {
	if s != nil {
		suo.SetHost(*s)
	}
	return suo
}

// SetPlatform sets the "platform" field.
func (suo *ServerUpdateOne) SetPlatform(s string) *ServerUpdateOne {
	suo.mutation.SetPlatform(s)
	return suo
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillablePlatform(s *string) *ServerUpdateOne {
	if s != nil {
		suo.SetPlatform(*s)
	}
	return suo
}

// SetClanOnly sets the "clan_only" field.
func (suo *ServerUpdateOne) SetClanOnly(b bool) *ServerUpdateOne {
	suo.mutation.SetClanOnly(b)
	return suo
}

// SetNillableClanOnly sets the "clan_only" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableClanOnly(b *bool) *ServerUpdateOne {
	if b != nil {
		suo.SetClanOnly(*b)
	}
	return suo
}

// SetLanOnly sets the "lan_only" field.
func (suo *ServerUpdateOne) SetLanOnly(b bool) *ServerUpdateOne {
	suo.mutation.SetLanOnly(b)
	return suo
}

// SetNillableLanOnly sets the "lan_only" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableLanOnly(b *bool) *ServerUpdateOne {
	if b != nil {
		suo.SetLanOnly(*b)
	}
	return suo
}

// SetName sets the "name" field.
func (suo *ServerUpdateOne) SetName(s string) *ServerUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableName(s *string) *ServerUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetGameMode sets the "game_mode" field.
func (suo *ServerUpdateOne) SetGameMode(s string) *ServerUpdateOne {
	suo.mutation.SetGameMode(s)
	return suo
}

// SetNillableGameMode sets the "game_mode" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableGameMode(s *string) *ServerUpdateOne {
	if s != nil {
		suo.SetGameMode(*s)
	}
	return suo
}

// SetIntent sets the "intent" field.
func (suo *ServerUpdateOne) SetIntent(s string) *ServerUpdateOne {
	suo.mutation.SetIntent(s)
	return suo
}

// SetNillableIntent sets the "intent" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableIntent(s *string) *ServerUpdateOne {
	if s != nil {
		suo.SetIntent(*s)
	}
	return suo
}

// SetSeason sets the "season" field.
func (suo *ServerUpdateOne) SetSeason(s string) *ServerUpdateOne {
	suo.mutation.SetSeason(s)
	return suo
}

// SetNillableSeason sets the "season" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableSeason(s *string) *ServerUpdateOne {
	if s != nil {
		suo.SetSeason(*s)
	}
	return suo
}

// SetVersion sets the "version" field.
func (suo *ServerUpdateOne) SetVersion(i int) *ServerUpdateOne {
	suo.mutation.ResetVersion()
	suo.mutation.SetVersion(i)
	return suo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableVersion(i *int) *ServerUpdateOne {
	if i != nil {
		suo.SetVersion(*i)
	}
	return suo
}

// AddVersion adds i to the "version" field.
func (suo *ServerUpdateOne) AddVersion(i int) *ServerUpdateOne {
	suo.mutation.AddVersion(i)
	return suo
}

// SetMaxOnline sets the "max_online" field.
func (suo *ServerUpdateOne) SetMaxOnline(i int) *ServerUpdateOne {
	suo.mutation.ResetMaxOnline()
	suo.mutation.SetMaxOnline(i)
	return suo
}

// SetNillableMaxOnline sets the "max_online" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableMaxOnline(i *int) *ServerUpdateOne {
	if i != nil {
		suo.SetMaxOnline(*i)
	}
	return suo
}

// AddMaxOnline adds i to the "max_online" field.
func (suo *ServerUpdateOne) AddMaxOnline(i int) *ServerUpdateOne {
	suo.mutation.AddMaxOnline(i)
	return suo
}

// SetOnline sets the "online" field.
func (suo *ServerUpdateOne) SetOnline(i int) *ServerUpdateOne {
	suo.mutation.ResetOnline()
	suo.mutation.SetOnline(i)
	return suo
}

// SetNillableOnline sets the "online" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableOnline(i *int) *ServerUpdateOne {
	if i != nil {
		suo.SetOnline(*i)
	}
	return suo
}

// AddOnline adds i to the "online" field.
func (suo *ServerUpdateOne) AddOnline(i int) *ServerUpdateOne {
	suo.mutation.AddOnline(i)
	return suo
}

// SetLevel sets the "level" field.
func (suo *ServerUpdateOne) SetLevel(i int) *ServerUpdateOne {
	suo.mutation.ResetLevel()
	suo.mutation.SetLevel(i)
	return suo
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableLevel(i *int) *ServerUpdateOne {
	if i != nil {
		suo.SetLevel(*i)
	}
	return suo
}

// AddLevel adds i to the "level" field.
func (suo *ServerUpdateOne) AddLevel(i int) *ServerUpdateOne {
	suo.mutation.AddLevel(i)
	return suo
}

// SetMod sets the "mod" field.
func (suo *ServerUpdateOne) SetMod(b bool) *ServerUpdateOne {
	suo.mutation.SetMod(b)
	return suo
}

// SetNillableMod sets the "mod" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableMod(b *bool) *ServerUpdateOne {
	if b != nil {
		suo.SetMod(*b)
	}
	return suo
}

// SetPvp sets the "pvp" field.
func (suo *ServerUpdateOne) SetPvp(b bool) *ServerUpdateOne {
	suo.mutation.SetPvp(b)
	return suo
}

// SetNillablePvp sets the "pvp" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillablePvp(b *bool) *ServerUpdateOne {
	if b != nil {
		suo.SetPvp(*b)
	}
	return suo
}

// SetPassword sets the "password" field.
func (suo *ServerUpdateOne) SetPassword(b bool) *ServerUpdateOne {
	suo.mutation.SetPassword(b)
	return suo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillablePassword(b *bool) *ServerUpdateOne {
	if b != nil {
		suo.SetPassword(*b)
	}
	return suo
}

// SetDedicated sets the "dedicated" field.
func (suo *ServerUpdateOne) SetDedicated(b bool) *ServerUpdateOne {
	suo.mutation.SetDedicated(b)
	return suo
}

// SetNillableDedicated sets the "dedicated" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableDedicated(b *bool) *ServerUpdateOne {
	if b != nil {
		suo.SetDedicated(*b)
	}
	return suo
}

// SetClientHosted sets the "client_hosted" field.
func (suo *ServerUpdateOne) SetClientHosted(b bool) *ServerUpdateOne {
	suo.mutation.SetClientHosted(b)
	return suo
}

// SetNillableClientHosted sets the "client_hosted" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableClientHosted(b *bool) *ServerUpdateOne {
	if b != nil {
		suo.SetClientHosted(*b)
	}
	return suo
}

// SetAllowNewPlayers sets the "allow_new_players" field.
func (suo *ServerUpdateOne) SetAllowNewPlayers(b bool) *ServerUpdateOne {
	suo.mutation.SetAllowNewPlayers(b)
	return suo
}

// SetNillableAllowNewPlayers sets the "allow_new_players" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableAllowNewPlayers(b *bool) *ServerUpdateOne {
	if b != nil {
		suo.SetAllowNewPlayers(*b)
	}
	return suo
}

// SetServerPaused sets the "server_paused" field.
func (suo *ServerUpdateOne) SetServerPaused(b bool) *ServerUpdateOne {
	suo.mutation.SetServerPaused(b)
	return suo
}

// SetNillableServerPaused sets the "server_paused" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableServerPaused(b *bool) *ServerUpdateOne {
	if b != nil {
		suo.SetServerPaused(*b)
	}
	return suo
}

// SetFriendOnly sets the "friend_only" field.
func (suo *ServerUpdateOne) SetFriendOnly(b bool) *ServerUpdateOne {
	suo.mutation.SetFriendOnly(b)
	return suo
}

// SetNillableFriendOnly sets the "friend_only" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableFriendOnly(b *bool) *ServerUpdateOne {
	if b != nil {
		suo.SetFriendOnly(*b)
	}
	return suo
}

// SetQueryVersion sets the "query_version" field.
func (suo *ServerUpdateOne) SetQueryVersion(i int64) *ServerUpdateOne {
	suo.mutation.ResetQueryVersion()
	suo.mutation.SetQueryVersion(i)
	return suo
}

// SetNillableQueryVersion sets the "query_version" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableQueryVersion(i *int64) *ServerUpdateOne {
	if i != nil {
		suo.SetQueryVersion(*i)
	}
	return suo
}

// AddQueryVersion adds i to the "query_version" field.
func (suo *ServerUpdateOne) AddQueryVersion(i int64) *ServerUpdateOne {
	suo.mutation.AddQueryVersion(i)
	return suo
}

// SetCountry sets the "country" field.
func (suo *ServerUpdateOne) SetCountry(s string) *ServerUpdateOne {
	suo.mutation.SetCountry(s)
	return suo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableCountry(s *string) *ServerUpdateOne {
	if s != nil {
		suo.SetCountry(*s)
	}
	return suo
}

// SetContinent sets the "continent" field.
func (suo *ServerUpdateOne) SetContinent(s string) *ServerUpdateOne {
	suo.mutation.SetContinent(s)
	return suo
}

// SetNillableContinent sets the "continent" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableContinent(s *string) *ServerUpdateOne {
	if s != nil {
		suo.SetContinent(*s)
	}
	return suo
}

// SetCountryCode sets the "country_code" field.
func (suo *ServerUpdateOne) SetCountryCode(s string) *ServerUpdateOne {
	suo.mutation.SetCountryCode(s)
	return suo
}

// SetNillableCountryCode sets the "country_code" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableCountryCode(s *string) *ServerUpdateOne {
	if s != nil {
		suo.SetCountryCode(*s)
	}
	return suo
}

// SetCity sets the "city" field.
func (suo *ServerUpdateOne) SetCity(s string) *ServerUpdateOne {
	suo.mutation.SetCity(s)
	return suo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableCity(s *string) *ServerUpdateOne {
	if s != nil {
		suo.SetCity(*s)
	}
	return suo
}

// SetRegion sets the "region" field.
func (suo *ServerUpdateOne) SetRegion(s string) *ServerUpdateOne {
	suo.mutation.SetRegion(s)
	return suo
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableRegion(s *string) *ServerUpdateOne {
	if s != nil {
		suo.SetRegion(*s)
	}
	return suo
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (suo *ServerUpdateOne) AddTagIDs(ids ...int) *ServerUpdateOne {
	suo.mutation.AddTagIDs(ids...)
	return suo
}

// AddTags adds the "tags" edges to the Tag entity.
func (suo *ServerUpdateOne) AddTags(t ...*Tag) *ServerUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.AddTagIDs(ids...)
}

// AddSecondaryIDs adds the "secondaries" edge to the Secondary entity by IDs.
func (suo *ServerUpdateOne) AddSecondaryIDs(ids ...int) *ServerUpdateOne {
	suo.mutation.AddSecondaryIDs(ids...)
	return suo
}

// AddSecondaries adds the "secondaries" edges to the Secondary entity.
func (suo *ServerUpdateOne) AddSecondaries(s ...*Secondary) *ServerUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddSecondaryIDs(ids...)
}

// Mutation returns the ServerMutation object of the builder.
func (suo *ServerUpdateOne) Mutation() *ServerMutation {
	return suo.mutation
}

// ClearTags clears all "tags" edges to the Tag entity.
func (suo *ServerUpdateOne) ClearTags() *ServerUpdateOne {
	suo.mutation.ClearTags()
	return suo
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (suo *ServerUpdateOne) RemoveTagIDs(ids ...int) *ServerUpdateOne {
	suo.mutation.RemoveTagIDs(ids...)
	return suo
}

// RemoveTags removes "tags" edges to Tag entities.
func (suo *ServerUpdateOne) RemoveTags(t ...*Tag) *ServerUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.RemoveTagIDs(ids...)
}

// ClearSecondaries clears all "secondaries" edges to the Secondary entity.
func (suo *ServerUpdateOne) ClearSecondaries() *ServerUpdateOne {
	suo.mutation.ClearSecondaries()
	return suo
}

// RemoveSecondaryIDs removes the "secondaries" edge to Secondary entities by IDs.
func (suo *ServerUpdateOne) RemoveSecondaryIDs(ids ...int) *ServerUpdateOne {
	suo.mutation.RemoveSecondaryIDs(ids...)
	return suo
}

// RemoveSecondaries removes "secondaries" edges to Secondary entities.
func (suo *ServerUpdateOne) RemoveSecondaries(s ...*Secondary) *ServerUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveSecondaryIDs(ids...)
}

// Where appends a list predicates to the ServerUpdate builder.
func (suo *ServerUpdateOne) Where(ps ...predicate.Server) *ServerUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ServerUpdateOne) Select(field string, fields ...string) *ServerUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Server entity.
func (suo *ServerUpdateOne) Save(ctx context.Context) (*Server, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ServerUpdateOne) SaveX(ctx context.Context) *Server {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ServerUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ServerUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *ServerUpdateOne) sqlSave(ctx context.Context) (_node *Server, err error) {
	_spec := sqlgraph.NewUpdateSpec(server.Table, server.Columns, sqlgraph.NewFieldSpec(server.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Server.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, server.FieldID)
		for _, f := range fields {
			if !server.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != server.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.GUID(); ok {
		_spec.SetField(server.FieldGUID, field.TypeString, value)
	}
	if value, ok := suo.mutation.RowID(); ok {
		_spec.SetField(server.FieldRowID, field.TypeString, value)
	}
	if value, ok := suo.mutation.SteamID(); ok {
		_spec.SetField(server.FieldSteamID, field.TypeString, value)
	}
	if value, ok := suo.mutation.SteamClanID(); ok {
		_spec.SetField(server.FieldSteamClanID, field.TypeString, value)
	}
	if value, ok := suo.mutation.OwnerID(); ok {
		_spec.SetField(server.FieldOwnerID, field.TypeString, value)
	}
	if value, ok := suo.mutation.SteamRoom(); ok {
		_spec.SetField(server.FieldSteamRoom, field.TypeString, value)
	}
	if value, ok := suo.mutation.Session(); ok {
		_spec.SetField(server.FieldSession, field.TypeString, value)
	}
	if value, ok := suo.mutation.Address(); ok {
		_spec.SetField(server.FieldAddress, field.TypeString, value)
	}
	if value, ok := suo.mutation.Port(); ok {
		_spec.SetField(server.FieldPort, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedPort(); ok {
		_spec.AddField(server.FieldPort, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Host(); ok {
		_spec.SetField(server.FieldHost, field.TypeString, value)
	}
	if value, ok := suo.mutation.Platform(); ok {
		_spec.SetField(server.FieldPlatform, field.TypeString, value)
	}
	if value, ok := suo.mutation.ClanOnly(); ok {
		_spec.SetField(server.FieldClanOnly, field.TypeBool, value)
	}
	if value, ok := suo.mutation.LanOnly(); ok {
		_spec.SetField(server.FieldLanOnly, field.TypeBool, value)
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(server.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.GameMode(); ok {
		_spec.SetField(server.FieldGameMode, field.TypeString, value)
	}
	if value, ok := suo.mutation.Intent(); ok {
		_spec.SetField(server.FieldIntent, field.TypeString, value)
	}
	if value, ok := suo.mutation.Season(); ok {
		_spec.SetField(server.FieldSeason, field.TypeString, value)
	}
	if value, ok := suo.mutation.Version(); ok {
		_spec.SetField(server.FieldVersion, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedVersion(); ok {
		_spec.AddField(server.FieldVersion, field.TypeInt, value)
	}
	if value, ok := suo.mutation.MaxOnline(); ok {
		_spec.SetField(server.FieldMaxOnline, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedMaxOnline(); ok {
		_spec.AddField(server.FieldMaxOnline, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Online(); ok {
		_spec.SetField(server.FieldOnline, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedOnline(); ok {
		_spec.AddField(server.FieldOnline, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Level(); ok {
		_spec.SetField(server.FieldLevel, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedLevel(); ok {
		_spec.AddField(server.FieldLevel, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Mod(); ok {
		_spec.SetField(server.FieldMod, field.TypeBool, value)
	}
	if value, ok := suo.mutation.Pvp(); ok {
		_spec.SetField(server.FieldPvp, field.TypeBool, value)
	}
	if value, ok := suo.mutation.Password(); ok {
		_spec.SetField(server.FieldPassword, field.TypeBool, value)
	}
	if value, ok := suo.mutation.Dedicated(); ok {
		_spec.SetField(server.FieldDedicated, field.TypeBool, value)
	}
	if value, ok := suo.mutation.ClientHosted(); ok {
		_spec.SetField(server.FieldClientHosted, field.TypeBool, value)
	}
	if value, ok := suo.mutation.AllowNewPlayers(); ok {
		_spec.SetField(server.FieldAllowNewPlayers, field.TypeBool, value)
	}
	if value, ok := suo.mutation.ServerPaused(); ok {
		_spec.SetField(server.FieldServerPaused, field.TypeBool, value)
	}
	if value, ok := suo.mutation.FriendOnly(); ok {
		_spec.SetField(server.FieldFriendOnly, field.TypeBool, value)
	}
	if value, ok := suo.mutation.QueryVersion(); ok {
		_spec.SetField(server.FieldQueryVersion, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedQueryVersion(); ok {
		_spec.AddField(server.FieldQueryVersion, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.Country(); ok {
		_spec.SetField(server.FieldCountry, field.TypeString, value)
	}
	if value, ok := suo.mutation.Continent(); ok {
		_spec.SetField(server.FieldContinent, field.TypeString, value)
	}
	if value, ok := suo.mutation.CountryCode(); ok {
		_spec.SetField(server.FieldCountryCode, field.TypeString, value)
	}
	if value, ok := suo.mutation.City(); ok {
		_spec.SetField(server.FieldCity, field.TypeString, value)
	}
	if value, ok := suo.mutation.Region(); ok {
		_spec.SetField(server.FieldRegion, field.TypeString, value)
	}
	if suo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   server.TagsTable,
			Columns: []string{server.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !suo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   server.TagsTable,
			Columns: []string{server.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   server.TagsTable,
			Columns: []string{server.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.SecondariesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   server.SecondariesTable,
			Columns: []string{server.SecondariesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(secondary.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedSecondariesIDs(); len(nodes) > 0 && !suo.mutation.SecondariesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   server.SecondariesTable,
			Columns: []string{server.SecondariesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(secondary.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SecondariesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   server.SecondariesTable,
			Columns: []string{server.SecondariesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(secondary.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Server{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{server.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
