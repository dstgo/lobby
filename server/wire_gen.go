// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"github.com/dstgo/lobby/server/api"
	auth2 "github.com/dstgo/lobby/server/api/auth"
	dst2 "github.com/dstgo/lobby/server/api/dst"
	job2 "github.com/dstgo/lobby/server/api/job"
	"github.com/dstgo/lobby/server/api/system"
	user2 "github.com/dstgo/lobby/server/api/user"
	"github.com/dstgo/lobby/server/data/cache"
	"github.com/dstgo/lobby/server/data/mq"
	"github.com/dstgo/lobby/server/data/repo"
	"github.com/dstgo/lobby/server/handler/auth"
	"github.com/dstgo/lobby/server/handler/dst"
	"github.com/dstgo/lobby/server/handler/email"
	"github.com/dstgo/lobby/server/handler/job"
	"github.com/dstgo/lobby/server/handler/user"
	"github.com/dstgo/lobby/server/svc"
	"github.com/dstgo/lobby/server/types"
)

import (
	_ "github.com/ginx-contribs/ent-sqlite"
	_ "time/tzdata"
)

// Injectors from wire.go:

// initialize and setup app environment
func setup(ctx types.Context) (svc.Context, error) {
	routerGroup := ctx.Router
	app := ctx.AppConf
	jwt := app.Jwt
	client := ctx.Redis
	tokenHandler := auth.NewTokenHandler(jwt, client)
	entClient := ctx.Ent
	userRepo := repo.NewUserRepo(entClient)
	redisCodeCache := cache.NewRedisCodeCache(client)
	confEmail := app.Email
	mailClient := ctx.Email
	streamQueue := mq.NewStreamQueue(client)
	handler, err := email.NewEmailHandler(confEmail, mailClient, streamQueue)
	if err != nil {
		return svc.Context{}, err
	}
	verifyCodeHandler := auth.NewVerifyCodeHandler(redisCodeCache, handler)
	authHandler := auth.NewAuthHandler(userRepo, tokenHandler, verifyCodeHandler)
	authAPI := auth2.NewAuthAPI(tokenHandler, authHandler, verifyCodeHandler)
	router := auth2.NewRouter(routerGroup, authAPI)
	systemAPI := system.NewSystemAPI()
	systemRouter := system.NewRouter(routerGroup, systemAPI)
	userHandler := user.NewUserHandler(userRepo)
	userAPI := user2.NewUserAPI(userHandler)
	userRouter := user2.NewRouter(routerGroup, userAPI)
	serverRepo := repo.NewServerRepo(entClient)
	lobbyapiClient := ctx.Lobby
	elasticsearchClient := ctx.Elastic
	serverEsRepo := repo.NewServerEsRepo(elasticsearchClient)
	elasticsearch := app.Elastic
	lobbyHandler := dst.NewLobbyHandler(serverRepo, lobbyapiClient, serverEsRepo, elasticsearch)
	lobbyAPI := dst2.NewLobbyAPI(lobbyHandler)
	dstRouter := dst2.NewRouter(routerGroup, lobbyAPI)
	jobRepo := repo.NewJobRepo(entClient)
	cronJob := job.NewCronJob()
	jobHandler := job.NewJobHandler(jobRepo, cronJob)
	jobAPI := job2.NewJobAPI(jobHandler)
	jobRouter := job2.NewRouter(routerGroup, jobAPI)
	apiRouter := api.Router{
		Auth:   router,
		System: systemRouter,
		User:   userRouter,
		Dst:    dstRouter,
		Job:    jobRouter,
	}
	context := svc.Context{
		ApiRouter:    apiRouter,
		LobbyHandler: lobbyHandler,
		ServerRepo:   serverRepo,
		UserHandler:  userHandler,
		UserRepo:     userRepo,
		AuthHandler:  authHandler,
		EmailHandler: handler,
		JobHandler:   jobHandler,
		JobRepo:      jobRepo,
		CronJob:      cronJob,
		MQ:           streamQueue,
	}
	return context, nil
}
