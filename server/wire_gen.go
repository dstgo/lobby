// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"github.com/dstgo/lobby/server/api"
	auth2 "github.com/dstgo/lobby/server/api/auth"
	"github.com/dstgo/lobby/server/data/cache"
	"github.com/dstgo/lobby/server/data/mq"
	"github.com/dstgo/lobby/server/data/repo"
	"github.com/dstgo/lobby/server/handler/auth"
	"github.com/dstgo/lobby/server/handler/email"
	"github.com/dstgo/lobby/server/types"
)

import (
	_ "github.com/ginx-contribs/ent-sqlite"
	_ "time/tzdata"
)

// Injectors from wire.go:

// initialize and setup app environment
func setup(env *types.Env) (api.Router, error) {
	routerGroup := env.Router
	app := env.AppConf
	jwt := app.Jwt
	client := env.Redis
	tokenHandler := auth.NewTokenHandler(jwt, client)
	entClient := env.Ent
	userRepo := repo.NewUserRepo(entClient)
	redisCodeCache := cache.NewRedisCodeCache(client)
	confEmail := app.Email
	mailClient := env.Email
	streamQueue := mq.NewStreamQueue(client)
	handler, err := email.NewEmailHandler(confEmail, mailClient, streamQueue)
	if err != nil {
		return api.Router{}, err
	}
	verifyCodeHandler := auth.NewVerifyCodeHandler(redisCodeCache, handler)
	authHandler := auth.NewAuthHandler(userRepo, tokenHandler, verifyCodeHandler)
	authAPI := auth2.NewAuthAPI(tokenHandler, authHandler, verifyCodeHandler)
	router := auth2.NewRouter(routerGroup, authAPI)
	apiRouter := api.Router{
		Auth: router,
	}
	return apiRouter, nil
}
